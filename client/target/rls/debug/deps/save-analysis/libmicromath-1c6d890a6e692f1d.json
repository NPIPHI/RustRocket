{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1","program":"C:\\Users\\Roger\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","micromath","--edition=2018","C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1c6d890a6e692f1d","-C","extra-filename=-1c6d890a6e692f1d","--out-dir","c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Roger\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps\\libmicromath-1c6d890a6e692f1d.rmeta"},"prelude":{"crate_id":{"name":"micromath","disambiguator":[316398108868415869,0]},"crate_root":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src","external_crates":[{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11165144592143370822,0]}},{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[252041924521724887,0]}},{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5467317383579905353,0]}}],"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":0,"byte_end":4134,"line_start":1,"line_end":118,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3956,"byte_end":3962,"line_start":109,"line_end":109,"column_start":24,"column_end":30},"alias_span":null,"name":"F32Ext","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":0,"byte_end":4134,"line_start":1,"line_end":118,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":338}],"decl_id":null,"docs":" Embedded-friendly (i.e. `#![no_std]`) math library featuring fast, safe\n floating point approximations for common arithmetic operations, as well as\n 2D and 3D vector types, statistical analysis functions, and quaternions.","sig":null,"attributes":[{"value":"/ Embedded-friendly (i.e. `#![no_std]`) math library featuring fast, safe","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":0,"byte_end":75,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ floating point approximations for common arithmetic operations, as well as","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":76,"byte_end":154,"line_start":2,"line_end":2,"column_start":1,"column_end":79}},{"value":"/ 2D and 3D vector types, statistical analysis functions, and quaternions.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":155,"byte_end":231,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":232,"byte_end":235,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Floating point approximations","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":236,"byte_end":272,"line_start":5,"line_end":5,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":273,"byte_end":276,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ `micromath` supports approximating many arithmetic operations on `f32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":277,"byte_end":351,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ using bitwise operations, providing great performance and small code size","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":352,"byte_end":429,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ at the cost of precision. For use cases like graphics and signal","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":430,"byte_end":498,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ processing, these approximations are often sufficient and the performance","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":499,"byte_end":576,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ gains worth the lost precision.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":577,"byte_end":612,"line_start":11,"line_end":11,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":613,"byte_end":616,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ These approximations are provided by the [micromath::F32Ext] trait which is","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":617,"byte_end":696,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ impl'd for `f32`, providing a drop-in `std`-compatible (sans lost precision) API.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":697,"byte_end":782,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":783,"byte_end":786,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":787,"byte_end":794,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use micromath::F32Ext;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":795,"byte_end":821,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":822,"byte_end":825,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let n = 2.0.sqrt();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":826,"byte_end":849,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(n, 1.5); // close enough","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":850,"byte_end":889,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":890,"byte_end":897,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":898,"byte_end":901,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ### Unused import warnings when linking `std`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":902,"byte_end":951,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":952,"byte_end":955,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Since the `F32Ext` trait provides methods which are already defined in","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":956,"byte_end":1030,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ `std`, in cases where your crate links `std` the `F32Ext` versions of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1031,"byte_end":1104,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ the same methods will not be used, in which case you will get an unused","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1105,"byte_end":1180,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ import warning for `F32Ext`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1181,"byte_end":1213,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1214,"byte_end":1217,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ If you encounter this, add an `#[allow(unused_imports)]` above the import.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1218,"byte_end":1296,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1297,"byte_end":1300,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1301,"byte_end":1308,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ #[allow(unused_imports)]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1309,"byte_end":1337,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/ use micromath::F32Ext;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1338,"byte_end":1364,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1365,"byte_end":1372,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1373,"byte_end":1376,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## Vector types","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1377,"byte_end":1396,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1397,"byte_end":1400,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ See the [`vector` module] for more information on vector types.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1401,"byte_end":1468,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1469,"byte_end":1472,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The following vector types are available, all of which have `pub x` and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1473,"byte_end":1548,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ `pub y` (and on 3D vectors, `pub z`) members:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1549,"byte_end":1598,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1599,"byte_end":1602,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ | Rust  | 2D      | 3D      |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1603,"byte_end":1636,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ |-------|---------|---------|","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1637,"byte_end":1670,"line_start":45,"line_end":45,"column_start":1,"column_end":34}},{"value":"/ | `i8`  | `I8x2`  | `I8x3`  |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1671,"byte_end":1704,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/ | `i16` | `I16x2` | `I16x3` |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1705,"byte_end":1738,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/ | `i32` | `I32x2` | `I32x3` |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1739,"byte_end":1772,"line_start":48,"line_end":48,"column_start":1,"column_end":34}},{"value":"/ | `u8`  | `U8x2`  | `U8x3`  |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1773,"byte_end":1806,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/ | `u16` | `U16x2` | `U16x3` |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1807,"byte_end":1840,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ | `u32` | `U32x2` | `U32x3` |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1841,"byte_end":1874,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/ | `f32` | `F32x2` | `F32x3` |","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1875,"byte_end":1908,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1909,"byte_end":1912,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Statistical analysis","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1913,"byte_end":1940,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1941,"byte_end":1944,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ See the [`statistics` module] for more information on statistical analysis","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":1945,"byte_end":2023,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ traits and functionality.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2024,"byte_end":2053,"line_start":57,"line_end":57,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2054,"byte_end":2057,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The following traits are available and impl'd for slices and iterators of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2058,"byte_end":2135,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/ `f32` (and can be impl'd for other types):","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2136,"byte_end":2182,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2183,"byte_end":2186,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ - [Mean] - compute arithmetic mean with the `mean()` method","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2187,"byte_end":2250,"line_start":62,"line_end":62,"column_start":1,"column_end":64}},{"value":"/ - [StdDev] - compute standard deviation with the `stddev()` method","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2251,"byte_end":2321,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/ - [Trim] - cull outliers from a sample slice with the `trim()` method.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2322,"byte_end":2396,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ - [Variance] - compute variance with the `variance() method","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2397,"byte_end":2460,"line_start":65,"line_end":65,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2461,"byte_end":2464,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Quaternions","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2465,"byte_end":2483,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ See the [`quaternion` module] for more information.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2488,"byte_end":2543,"line_start":69,"line_end":69,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2544,"byte_end":2547,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ [micromath::F32Ext]: https://docs.rs/micromath/latest/micromath/trait.F32Ext.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2548,"byte_end":2633,"line_start":71,"line_end":71,"column_start":1,"column_end":86}},{"value":"/ [`vector` module]: https://docs.rs/micromath/latest/micromath/vector/index.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2634,"byte_end":2717,"line_start":72,"line_end":72,"column_start":1,"column_end":84}},{"value":"/ [`statistics` module]: https://docs.rs/micromath/latest/micromath/statistics/index.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2718,"byte_end":2809,"line_start":73,"line_end":73,"column_start":1,"column_end":92}},{"value":"/ [`quaternion` module]: https://docs.rs/micromath/latest/micromath/quaternion/index.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2810,"byte_end":2901,"line_start":74,"line_end":74,"column_start":1,"column_end":92}},{"value":"/ [Mean]: https://docs.rs/micromath/latest/micromath/statistics/trait.Mean.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2902,"byte_end":2983,"line_start":75,"line_end":75,"column_start":1,"column_end":82}},{"value":"/ [StdDev]: https://docs.rs/micromath/latest/micromath/statistics/trait.StdDev.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":2984,"byte_end":3069,"line_start":76,"line_end":76,"column_start":1,"column_end":86}},{"value":"/ [Trim]: https://docs.rs/micromath/latest/micromath/statistics/trim/trait.Trim.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3070,"byte_end":3156,"line_start":77,"line_end":77,"column_start":1,"column_end":87}},{"value":"/ [Variance]: https://docs.rs/micromath/latest/micromath/statistics/trait.Variance.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3157,"byte_end":3246,"line_start":78,"line_end":78,"column_start":1,"column_end":90}},{"value":"no_std","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3248,"byte_end":3258,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3465,"byte_end":3488,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms, trivial_casts, trivial_numeric_casts,\n       unused_qualifications)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\lib.rs","byte_start":3489,"byte_end":3612,"line_start":87,"line_end":93,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4660,"byte_end":4666,"line_start":35,"line_end":35,"column_start":11,"column_end":17},"name":"F32Ext","qualname":"::f32ext::F32Ext","value":"F32Ext: Sized","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"decl_id":null,"docs":" `f32` extension providing various arithmetic approximations and polyfills\n for `std` functionality.\n","sig":null,"attributes":[{"value":"/ `f32` extension providing various arithmetic approximations and polyfills","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4543,"byte_end":4620,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ for `std` functionality.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4621,"byte_end":4649,"line_start":34,"line_end":34,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4777,"byte_end":4780,"line_start":38,"line_end":38,"column_start":8,"column_end":11},"name":"abs","qualname":"::f32ext::F32Ext::abs","value":"pub fn abs(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Compute absolute value with a constant-time, data-independent\n implementation.\n","sig":null,"attributes":[{"value":"/ Compute absolute value with a constant-time, data-independent","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4680,"byte_end":4745,"line_start":36,"line_end":36,"column_start":5,"column_end":70}},{"value":"/ implementation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4750,"byte_end":4769,"line_start":37,"line_end":37,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4874,"byte_end":4878,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"asin","qualname":"::f32ext::F32Ext::asin","value":"pub fn asin(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `asin(x)` in radians in the range `[-pi/2, pi/2]`.\n","sig":null,"attributes":[{"value":"/ Approximate `asin(x)` in radians in the range `[-pi/2, pi/2]`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4800,"byte_end":4866,"line_start":40,"line_end":40,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4965,"byte_end":4969,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"acos","qualname":"::f32ext::F32Ext::acos","value":"pub fn acos(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `acos(x)` in radians in the range `[0, pi]`\n","sig":null,"attributes":[{"value":"/ Approximate `acos(x)` in radians in the range `[0, pi]`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4898,"byte_end":4957,"line_start":43,"line_end":43,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5066,"byte_end":5070,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"atan","qualname":"::f32ext::F32Ext::atan","value":"pub fn atan(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `atan(x)` in radians with a maximum error of `0.002`.\n","sig":null,"attributes":[{"value":"/ Approximate `atan(x)` in radians with a maximum error of `0.002`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4989,"byte_end":5058,"line_start":46,"line_end":46,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5208,"byte_end":5217,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"atan_norm","qualname":"::f32ext::F32Ext::atan_norm","value":"pub fn atan_norm(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `atan(x)` normalized to the `[−1,1]` range with a maximum\n error of `0.1620` degrees.\n","sig":null,"attributes":[{"value":"/ Approximate `atan(x)` normalized to the `[−1,1]` range with a maximum","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5090,"byte_end":5165,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ error of `0.1620` degrees.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5170,"byte_end":5200,"line_start":50,"line_end":50,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5353,"byte_end":5358,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"atan2","qualname":"::f32ext::F32Ext::atan2","value":"pub fn atan2(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate the four quadrant arctangent `atan2(x)` in radians, with\n a maximum error of `0.002`.\n","sig":null,"attributes":[{"value":"/ Approximate the four quadrant arctangent `atan2(x)` in radians, with","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5237,"byte_end":5309,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ a maximum error of `0.002`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5314,"byte_end":5345,"line_start":54,"line_end":54,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5525,"byte_end":5535,"line_start":59,"line_end":59,"column_start":8,"column_end":18},"name":"atan2_norm","qualname":"::f32ext::F32Ext::atan2_norm","value":"pub fn atan2_norm(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate the four quadrant arctangent.\n Normalized to the `[0,4)` range with a maximum error of `0.1620` degrees.\n","sig":null,"attributes":[{"value":"/ Approximate the four quadrant arctangent.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5390,"byte_end":5435,"line_start":57,"line_end":57,"column_start":5,"column_end":50}},{"value":"/ Normalized to the `[0,4)` range with a maximum error of `0.1620` degrees.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5440,"byte_end":5517,"line_start":58,"line_end":58,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5614,"byte_end":5618,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"ceil","qualname":"::f32ext::F32Ext::ceil","value":"pub fn ceil(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate floating point ceiling.\n","sig":null,"attributes":[{"value":"/ Approximate floating point ceiling.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5567,"byte_end":5606,"line_start":61,"line_end":61,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5712,"byte_end":5715,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"cos","qualname":"::f32ext::F32Ext::cos","value":"pub fn cos(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate cosine in radians with a maximum error of `0.002`.\n","sig":null,"attributes":[{"value":"/ Approximate cosine in radians with a maximum error of `0.002`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5638,"byte_end":5704,"line_start":64,"line_end":64,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5815,"byte_end":5825,"line_start":68,"line_end":68,"column_start":8,"column_end":18},"name":"div_euclid","qualname":"::f32ext::F32Ext::div_euclid","value":"pub fn div_euclid(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Calculates Euclidean division, the matching method for `rem_euclid`.\n","sig":null,"attributes":[{"value":"/ Calculates Euclidean division, the matching method for `rem_euclid`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5735,"byte_end":5807,"line_start":67,"line_end":67,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5902,"byte_end":5907,"line_start":71,"line_end":71,"column_start":8,"column_end":13},"name":"floor","qualname":"::f32ext::F32Ext::floor","value":"pub fn floor(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate floating point floor.\n","sig":null,"attributes":[{"value":"/ Approximate floating point floor.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5857,"byte_end":5894,"line_start":70,"line_end":70,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6047,"byte_end":6052,"line_start":75,"line_end":75,"column_start":8,"column_end":13},"name":"hypot","qualname":"::f32ext::F32Ext::hypot","value":"pub fn hypot(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.\n","sig":null,"attributes":[{"value":"/ Approximate the length of the hypotenuse of a right-angle triangle given","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":5927,"byte_end":6003,"line_start":73,"line_end":73,"column_start":5,"column_end":81}},{"value":"/ legs of length `x` and `y`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6008,"byte_end":6039,"line_start":74,"line_end":74,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6147,"byte_end":6150,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"inv","qualname":"::f32ext::F32Ext::inv","value":"pub fn inv(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `1/x` with an average deviation of ~8%.\n","sig":null,"attributes":[{"value":"/ Approximate `1/x` with an average deviation of ~8%.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6084,"byte_end":6139,"line_start":77,"line_end":77,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6247,"byte_end":6254,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"invsqrt","qualname":"::f32ext::F32Ext::invsqrt","value":"pub fn invsqrt(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate inverse square root with an average deviation of ~5%.\n","sig":null,"attributes":[{"value":"/ Approximate inverse square root with an average deviation of ~5%.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6170,"byte_end":6239,"line_start":80,"line_end":80,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6351,"byte_end":6361,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"rem_euclid","qualname":"::f32ext::F32Ext::rem_euclid","value":"pub fn rem_euclid(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Calculates the least nonnegative remainder of `self (mod other)`.\n","sig":null,"attributes":[{"value":"/ Calculates the least nonnegative remainder of `self (mod other)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6274,"byte_end":6343,"line_start":83,"line_end":83,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6465,"byte_end":6468,"line_start":87,"line_end":87,"column_start":8,"column_end":11},"name":"sin","qualname":"::f32ext::F32Ext::sin","value":"pub fn sin(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate sine in radians with a maximum error of `0.002`.\n","sig":null,"attributes":[{"value":"/ Approximate sine in radians with a maximum error of `0.002`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6393,"byte_end":6457,"line_start":86,"line_end":86,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6557,"byte_end":6561,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::f32ext::F32Ext::sqrt","value":"pub fn sqrt(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate square root with an average deviation of ~5%.\n","sig":null,"attributes":[{"value":"/ Approximate square root with an average deviation of ~5%.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6488,"byte_end":6549,"line_start":89,"line_end":89,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6655,"byte_end":6658,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"tan","qualname":"::f32ext::F32Ext::tan","value":"pub fn tan(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `tan(x)` in radians with a maximum error of `0.6`.\n","sig":null,"attributes":[{"value":"/ Approximate `tan(x)` in radians with a maximum error of `0.6`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6581,"byte_end":6647,"line_start":92,"line_end":92,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6745,"byte_end":6750,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"trunc","qualname":"::f32ext::F32Ext::trunc","value":"pub fn trunc(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Retrieve whole number part of floating point with sign.\n","sig":null,"attributes":[{"value":"/ Retrieve whole number part of floating point with sign.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6678,"byte_end":6737,"line_start":95,"line_end":95,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6832,"byte_end":6837,"line_start":99,"line_end":99,"column_start":8,"column_end":13},"name":"round","qualname":"::f32ext::F32Ext::round","value":"pub fn round(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Round the number part of floating point with sign.\n","sig":null,"attributes":[{"value":"/ Round the number part of floating point with sign.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6770,"byte_end":6824,"line_start":98,"line_end":98,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6926,"byte_end":6931,"line_start":102,"line_end":102,"column_start":8,"column_end":13},"name":"fract","qualname":"::f32ext::F32Ext::fract","value":"pub fn fract(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Retrieve the fractional part of floating point with sign.\n","sig":null,"attributes":[{"value":"/ Retrieve the fractional part of floating point with sign.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6857,"byte_end":6918,"line_start":101,"line_end":101,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7021,"byte_end":7029,"line_start":105,"line_end":105,"column_start":8,"column_end":16},"name":"copysign","qualname":"::f32ext::F32Ext::copysign","value":"pub fn copysign(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Copies the sign from one number to another and returns it.\n","sig":null,"attributes":[{"value":"/ Copies the sign from one number to another and returns it.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":6951,"byte_end":7013,"line_start":104,"line_end":104,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7092,"byte_end":7094,"line_start":108,"line_end":108,"column_start":8,"column_end":10},"name":"ln","qualname":"::f32ext::F32Ext::ln","value":"pub fn ln(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `ln(x)`.\n","sig":null,"attributes":[{"value":"/ Approximate `ln(x)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7060,"byte_end":7084,"line_start":107,"line_end":107,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7144,"byte_end":7147,"line_start":111,"line_end":111,"column_start":8,"column_end":11},"name":"exp","qualname":"::f32ext::F32Ext::exp","value":"pub fn exp(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `e^x`.\n","sig":null,"attributes":[{"value":"/ Approximate `e^x`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7114,"byte_end":7136,"line_start":110,"line_end":110,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7220,"byte_end":7223,"line_start":114,"line_end":114,"column_start":8,"column_end":11},"name":"log","qualname":"::f32ext::F32Ext::log","value":"pub fn log(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `log` with an arbitrary base.\n","sig":null,"attributes":[{"value":"/ Approximate `log` with an arbitrary base.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7167,"byte_end":7212,"line_start":113,"line_end":113,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7285,"byte_end":7289,"line_start":117,"line_end":117,"column_start":8,"column_end":12},"name":"log2","qualname":"::f32ext::F32Ext::log2","value":"pub fn log2(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `log2`.\n","sig":null,"attributes":[{"value":"/ Approximate `log2`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7254,"byte_end":7277,"line_start":116,"line_end":116,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7341,"byte_end":7346,"line_start":120,"line_end":120,"column_start":8,"column_end":13},"name":"log10","qualname":"::f32ext::F32Ext::log10","value":"pub fn log10(Self) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `log10`.\n","sig":null,"attributes":[{"value":"/ Approximate `log10`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7309,"byte_end":7333,"line_start":119,"line_end":119,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7399,"byte_end":7403,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"powf","qualname":"::f32ext::F32Ext::powf","value":"pub fn powf(Self, f32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `self^n`.\n","sig":null,"attributes":[{"value":"/ Approximate `self^n`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7366,"byte_end":7391,"line_start":122,"line_end":122,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7483,"byte_end":7487,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"powi","qualname":"::f32ext::F32Ext::powi","value":"pub fn powi(Self, i32) -> f32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Approximate `self^n` where n is an `i32`\n","sig":null,"attributes":[{"value":"/ Approximate `self^n` where n is an `i32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":7431,"byte_end":7475,"line_start":125,"line_end":125,"column_start":5,"column_end":49}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\micromath-1.1.1\\src\\f32ext.rs","byte_start":4668,"byte_end":4673,"line_start":35,"line_end":35,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":278}}]}