{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0","program":"C:\\Users\\Roger\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=419394e259bf2b5c","-C","extra-filename=-419394e259bf2b5c","--out-dir","c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps\\libbytemuck-c1468f03f49f53ea.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Roger\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Roger\\Desktop\\RustRocket\\client\\target\\rls\\debug\\deps\\libsafe_arch-419394e259bf2b5c.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[1663877721114194856,0]},"crate_root":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src","external_crates":[{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11165144592143370822,0]}},{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[252041924521724887,0]}},{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5467317383579905353,0]}},{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[12132668103322688222,0]}}],"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":92}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":13989,"byte_end":14042,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14043,"byte_end":14046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14047,"byte_end":14126,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14127,"byte_end":14200,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14201,"byte_end":14269,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14270,"byte_end":14286,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14287,"byte_end":14318,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14319,"byte_end":14322,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14323,"byte_end":14335,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14336,"byte_end":14414,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14415,"byte_end":14481,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14482,"byte_end":14550,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14551,"byte_end":14627,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14628,"byte_end":14671,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14672,"byte_end":14745,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14746,"byte_end":14826,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14827,"byte_end":14901,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14902,"byte_end":14977,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14978,"byte_end":15055,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15056,"byte_end":15059,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15060,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15078,"byte_end":15155,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15156,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15231,"byte_end":15310,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15311,"byte_end":15367,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15368,"byte_end":15371,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15372,"byte_end":15442,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15443,"byte_end":15522,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15523,"byte_end":15603,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15604,"byte_end":15667,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15668,"byte_end":15671,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15672,"byte_end":15746,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15747,"byte_end":15827,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15828,"byte_end":15902,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15903,"byte_end":15981,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15982,"byte_end":16044,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16045,"byte_end":16109,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16110,"byte_end":16113,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16114,"byte_end":16139,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16140,"byte_end":16216,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16217,"byte_end":16220,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16221,"byte_end":16260,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16261,"byte_end":16341,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16342,"byte_end":16422,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16423,"byte_end":16459,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16460,"byte_end":16501,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16502,"byte_end":16576,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16577,"byte_end":16654,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16655,"byte_end":16734,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16735,"byte_end":16794,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16795,"byte_end":16840,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16841,"byte_end":16912,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16913,"byte_end":16969,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16970,"byte_end":17002,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17003,"byte_end":17082,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17083,"byte_end":17162,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17163,"byte_end":17220,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17221,"byte_end":17292,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17293,"byte_end":17360,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17361,"byte_end":17419,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17420,"byte_end":17498,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17499,"byte_end":17578,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17579,"byte_end":17659,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17660,"byte_end":17738,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17739,"byte_end":17784,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17785,"byte_end":17865,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17866,"byte_end":17942,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17943,"byte_end":17955,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17956,"byte_end":18032,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18033,"byte_end":18111,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18112,"byte_end":18192,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18193,"byte_end":18212,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18213,"byte_end":18235,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18236,"byte_end":18313,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18314,"byte_end":18386,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18387,"byte_end":18467,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18468,"byte_end":18534,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18535,"byte_end":18612,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18613,"byte_end":18661,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18662,"byte_end":18740,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18741,"byte_end":18817,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18818,"byte_end":18897,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18898,"byte_end":18977,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18978,"byte_end":19039,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19040,"byte_end":19111,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19112,"byte_end":19149,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19150,"byte_end":19229,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19230,"byte_end":19310,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19311,"byte_end":19343,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19408,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19409,"byte_end":19474,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19475,"byte_end":19544,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19545,"byte_end":19622,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19623,"byte_end":19694,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19695,"byte_end":19772,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19773,"byte_end":19852,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19853,"byte_end":19927,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19928,"byte_end":19940,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19941,"byte_end":20018,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20019,"byte_end":20098,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20099,"byte_end":20130,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20131,"byte_end":20206,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20207,"byte_end":20277,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20278,"byte_end":20358,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20359,"byte_end":20438,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20439,"byte_end":20515,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20516,"byte_end":20589,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20590,"byte_end":20670,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20671,"byte_end":20747,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20748,"byte_end":20826,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20827,"byte_end":20890,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20891,"byte_end":20967,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20968,"byte_end":21045,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21046,"byte_end":21125,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21126,"byte_end":21188,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21189,"byte_end":21265,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21266,"byte_end":21282,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21283,"byte_end":21362,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21363,"byte_end":21398,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21399,"byte_end":21473,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21474,"byte_end":21527,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21528,"byte_end":21605,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21606,"byte_end":21686,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21687,"byte_end":21765,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21766,"byte_end":21831,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21832,"byte_end":21912,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21913,"byte_end":21991,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21992,"byte_end":22047,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22048,"byte_end":22128,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22129,"byte_end":22185,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22186,"byte_end":22266,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22267,"byte_end":22342,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22343,"byte_end":22420,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22421,"byte_end":22498,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22499,"byte_end":22577,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22578,"byte_end":22645,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22646,"byte_end":22666,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22747,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22748,"byte_end":22819,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22820,"byte_end":22899,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22900,"byte_end":22928,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22929,"byte_end":22955,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22956,"byte_end":23012,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23013,"byte_end":23090,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23091,"byte_end":23169,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23170,"byte_end":23229,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23230,"byte_end":23252,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23253,"byte_end":23332,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23333,"byte_end":23413,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23414,"byte_end":23492,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23493,"byte_end":23511,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23512,"byte_end":23576,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23577,"byte_end":23654,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23655,"byte_end":23729,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23730,"byte_end":23769,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23770,"byte_end":23849,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23850,"byte_end":23930,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23931,"byte_end":23974,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23975,"byte_end":24054,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24055,"byte_end":24135,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24136,"byte_end":24213,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24214,"byte_end":24293,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24294,"byte_end":24317,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24318,"byte_end":24398,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24399,"byte_end":24445,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953571,"byte_end":8953575,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953248,"byte_end":8953308,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953309,"byte_end":8953312,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953313,"byte_end":8953391,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953392,"byte_end":8953465,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953466,"byte_end":8953507,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953508,"byte_end":8953528,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953529,"byte_end":8953559,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953576,"byte_end":8953586,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954003,"byte_end":8954011,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953834,"byte_end":8953872,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953875,"byte_end":8953878,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953881,"byte_end":8953959,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953962,"byte_end":8953973,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953976,"byte_end":8953993,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954238,"byte_end":8954248,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954055,"byte_end":8954091,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954094,"byte_end":8954097,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954100,"byte_end":8954177,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954180,"byte_end":8954194,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954197,"byte_end":8954208,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954211,"byte_end":8954228,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954482,"byte_end":8954489,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954298,"byte_end":8954361,"line_start":47,"line_end":47,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954364,"byte_end":8954367,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954370,"byte_end":8954438,"line_start":49,"line_end":49,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954441,"byte_end":8954452,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954455,"byte_end":8954472,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954747,"byte_end":8954756,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954559,"byte_end":8954622,"line_start":56,"line_end":56,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954625,"byte_end":8954628,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954631,"byte_end":8954703,"line_start":58,"line_end":58,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954706,"byte_end":8954717,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954720,"byte_end":8954737,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959302,"byte_end":8959307,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8958979,"byte_end":8959039,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959040,"byte_end":8959043,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959044,"byte_end":8959122,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959123,"byte_end":8959196,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959197,"byte_end":8959238,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959239,"byte_end":8959259,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959260,"byte_end":8959290,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959308,"byte_end":8959319,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959742,"byte_end":8959750,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959572,"byte_end":8959611,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959614,"byte_end":8959617,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959620,"byte_end":8959698,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959701,"byte_end":8959712,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959715,"byte_end":8959732,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959979,"byte_end":8959989,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959794,"byte_end":8959831,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959834,"byte_end":8959837,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959840,"byte_end":8959918,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959921,"byte_end":8959935,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959938,"byte_end":8959949,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959952,"byte_end":8959969,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960220,"byte_end":8960227,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960039,"byte_end":8960103,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960106,"byte_end":8960109,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960112,"byte_end":8960176,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960179,"byte_end":8960190,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960193,"byte_end":8960210,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960482,"byte_end":8960491,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960297,"byte_end":8960361,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960364,"byte_end":8960367,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960370,"byte_end":8960438,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960441,"byte_end":8960452,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960455,"byte_end":8960472,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965995,"byte_end":8966000,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965515,"byte_end":8965571,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965572,"byte_end":8965575,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965576,"byte_end":8965649,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965650,"byte_end":8965728,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965729,"byte_end":8965747,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965748,"byte_end":8965828,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965829,"byte_end":8965906,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965907,"byte_end":8965931,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965932,"byte_end":8965952,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8965953,"byte_end":8965983,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966001,"byte_end":8966012,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974199,"byte_end":8974203,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8973875,"byte_end":8973936,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8973937,"byte_end":8973940,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8973941,"byte_end":8974019,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974020,"byte_end":8974093,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974094,"byte_end":8974135,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974136,"byte_end":8974156,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974157,"byte_end":8974187,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974204,"byte_end":8974214,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974631,"byte_end":8974639,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974462,"byte_end":8974500,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974503,"byte_end":8974506,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974509,"byte_end":8974587,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974590,"byte_end":8974601,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974604,"byte_end":8974621,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974866,"byte_end":8974876,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974683,"byte_end":8974719,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974722,"byte_end":8974725,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974728,"byte_end":8974805,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974808,"byte_end":8974822,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974825,"byte_end":8974836,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974839,"byte_end":8974856,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975105,"byte_end":8975112,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974920,"byte_end":8974983,"line_start":45,"line_end":45,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974986,"byte_end":8974989,"line_start":46,"line_end":46,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974992,"byte_end":8975061,"line_start":47,"line_end":47,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975064,"byte_end":8975075,"line_start":48,"line_end":48,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975078,"byte_end":8975095,"line_start":49,"line_end":49,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975371,"byte_end":8975380,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975182,"byte_end":8975245,"line_start":54,"line_end":54,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975248,"byte_end":8975251,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975254,"byte_end":8975327,"line_start":56,"line_end":56,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975330,"byte_end":8975341,"line_start":57,"line_end":57,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975344,"byte_end":8975361,"line_start":58,"line_end":58,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981167,"byte_end":8981172,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8980843,"byte_end":8980904,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8980905,"byte_end":8980908,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8980909,"byte_end":8980987,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8980988,"byte_end":8981061,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981062,"byte_end":8981103,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981104,"byte_end":8981124,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981125,"byte_end":8981155,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981173,"byte_end":8981184,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981607,"byte_end":8981615,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981437,"byte_end":8981476,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981479,"byte_end":8981482,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981485,"byte_end":8981563,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981566,"byte_end":8981577,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981580,"byte_end":8981597,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981844,"byte_end":8981854,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981659,"byte_end":8981696,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981699,"byte_end":8981702,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981705,"byte_end":8981783,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981786,"byte_end":8981800,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981803,"byte_end":8981814,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981817,"byte_end":8981834,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982085,"byte_end":8982092,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981904,"byte_end":8981968,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981971,"byte_end":8981974,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981977,"byte_end":8982041,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982044,"byte_end":8982055,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982058,"byte_end":8982075,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982347,"byte_end":8982356,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982162,"byte_end":8982226,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982229,"byte_end":8982232,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982235,"byte_end":8982303,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982306,"byte_end":8982317,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982320,"byte_end":8982337,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987860,"byte_end":8987865,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987380,"byte_end":8987436,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987437,"byte_end":8987440,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987441,"byte_end":8987514,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987515,"byte_end":8987593,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987594,"byte_end":8987612,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987613,"byte_end":8987693,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987694,"byte_end":8987771,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987772,"byte_end":8987796,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987797,"byte_end":8987817,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987818,"byte_end":8987848,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987866,"byte_end":8987877,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996017,"byte_end":8996025,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995677,"byte_end":8995698,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995699,"byte_end":8995706,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995707,"byte_end":8995730,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995731,"byte_end":8995782,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995783,"byte_end":8995834,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995835,"byte_end":8995873,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995874,"byte_end":8995916,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995917,"byte_end":8995924,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995925,"byte_end":8995936,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8995937,"byte_end":8995954,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996460,"byte_end":8996470,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996097,"byte_end":8996141,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996142,"byte_end":8996149,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996150,"byte_end":8996173,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996174,"byte_end":8996225,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996226,"byte_end":8996277,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996278,"byte_end":8996318,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996319,"byte_end":8996359,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996360,"byte_end":8996367,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996368,"byte_end":8996379,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996380,"byte_end":8996397,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996882,"byte_end":8996893,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996542,"byte_end":8996562,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996563,"byte_end":8996570,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996571,"byte_end":8996594,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996595,"byte_end":8996646,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996647,"byte_end":8996698,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996699,"byte_end":8996740,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996741,"byte_end":8996781,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996782,"byte_end":8996789,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996790,"byte_end":8996801,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996802,"byte_end":8996819,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997311,"byte_end":8997325,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996965,"byte_end":8996988,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996989,"byte_end":8996996,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8996997,"byte_end":8997020,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997021,"byte_end":8997072,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997073,"byte_end":8997124,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997125,"byte_end":8997169,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997170,"byte_end":8997210,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997211,"byte_end":8997218,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997219,"byte_end":8997230,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997231,"byte_end":8997248,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997773,"byte_end":8997789,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997400,"byte_end":8997422,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997423,"byte_end":8997426,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997427,"byte_end":8997443,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997444,"byte_end":8997451,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997452,"byte_end":8997475,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997476,"byte_end":8997527,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997528,"byte_end":8997579,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997580,"byte_end":8997625,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997626,"byte_end":8997672,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997673,"byte_end":8997680,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997681,"byte_end":8997692,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997693,"byte_end":8997710,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998268,"byte_end":8998286,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997863,"byte_end":8997908,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997909,"byte_end":8997912,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997913,"byte_end":8997929,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997930,"byte_end":8997937,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997938,"byte_end":8997961,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8997962,"byte_end":8998013,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998014,"byte_end":8998065,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998066,"byte_end":8998113,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998114,"byte_end":8998167,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998168,"byte_end":8998175,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998176,"byte_end":8998187,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998188,"byte_end":8998205,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998740,"byte_end":8998756,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998360,"byte_end":8998382,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998383,"byte_end":8998386,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998387,"byte_end":8998403,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998404,"byte_end":8998411,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998412,"byte_end":8998435,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998436,"byte_end":8998487,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998488,"byte_end":8998539,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998540,"byte_end":8998585,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998586,"byte_end":8998639,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998640,"byte_end":8998647,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998648,"byte_end":8998659,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998660,"byte_end":8998677,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999263,"byte_end":8999281,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998830,"byte_end":8998875,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998876,"byte_end":8998879,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998880,"byte_end":8998896,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998897,"byte_end":8998904,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998905,"byte_end":8998928,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998929,"byte_end":8998980,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8998981,"byte_end":8999032,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999033,"byte_end":8999080,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999081,"byte_end":8999162,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999163,"byte_end":8999170,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999171,"byte_end":8999182,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999183,"byte_end":8999200,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999727,"byte_end":8999743,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999355,"byte_end":8999376,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999377,"byte_end":8999380,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999381,"byte_end":8999397,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999398,"byte_end":8999405,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999406,"byte_end":8999429,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999430,"byte_end":8999481,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999482,"byte_end":8999533,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999534,"byte_end":8999579,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999580,"byte_end":8999626,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999627,"byte_end":8999634,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999635,"byte_end":8999646,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999647,"byte_end":8999664,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000249,"byte_end":9000267,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999817,"byte_end":8999861,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999862,"byte_end":8999865,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999866,"byte_end":8999882,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999883,"byte_end":8999890,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999891,"byte_end":8999914,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999915,"byte_end":8999966,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8999967,"byte_end":9000018,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000019,"byte_end":9000066,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000067,"byte_end":9000148,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000149,"byte_end":9000156,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000157,"byte_end":9000168,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000169,"byte_end":9000186,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000714,"byte_end":9000730,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000341,"byte_end":9000363,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000364,"byte_end":9000367,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000368,"byte_end":9000384,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000385,"byte_end":9000392,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000393,"byte_end":9000416,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000417,"byte_end":9000468,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000469,"byte_end":9000520,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000521,"byte_end":9000566,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000567,"byte_end":9000613,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000614,"byte_end":9000621,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000622,"byte_end":9000633,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000634,"byte_end":9000651,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001237,"byte_end":9001255,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000804,"byte_end":9000849,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000850,"byte_end":9000853,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000854,"byte_end":9000870,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000871,"byte_end":9000878,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000879,"byte_end":9000902,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000903,"byte_end":9000954,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9000955,"byte_end":9001006,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001007,"byte_end":9001054,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001055,"byte_end":9001136,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001137,"byte_end":9001144,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001145,"byte_end":9001156,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001157,"byte_end":9001174,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001694,"byte_end":9001710,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001329,"byte_end":9001350,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001351,"byte_end":9001354,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001355,"byte_end":9001371,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001372,"byte_end":9001379,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001380,"byte_end":9001403,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001404,"byte_end":9001455,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001456,"byte_end":9001507,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001508,"byte_end":9001553,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001554,"byte_end":9001593,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001594,"byte_end":9001601,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001602,"byte_end":9001613,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001614,"byte_end":9001631,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002216,"byte_end":9002234,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001784,"byte_end":9001828,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001829,"byte_end":9001832,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001833,"byte_end":9001849,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001850,"byte_end":9001857,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001858,"byte_end":9001881,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001882,"byte_end":9001933,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001934,"byte_end":9001985,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9001986,"byte_end":9002033,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002034,"byte_end":9002115,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002116,"byte_end":9002123,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002124,"byte_end":9002135,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002136,"byte_end":9002153,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002682,"byte_end":9002699,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002308,"byte_end":9002330,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002331,"byte_end":9002334,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002335,"byte_end":9002351,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002352,"byte_end":9002359,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002360,"byte_end":9002383,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002384,"byte_end":9002435,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002436,"byte_end":9002487,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002488,"byte_end":9002534,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002535,"byte_end":9002581,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002582,"byte_end":9002589,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002590,"byte_end":9002601,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002602,"byte_end":9002619,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003173,"byte_end":9003192,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002774,"byte_end":9002819,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002820,"byte_end":9002823,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002824,"byte_end":9002840,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002841,"byte_end":9002848,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002849,"byte_end":9002872,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002873,"byte_end":9002924,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002925,"byte_end":9002976,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9002977,"byte_end":9003025,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003026,"byte_end":9003072,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003073,"byte_end":9003080,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003081,"byte_end":9003092,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003093,"byte_end":9003110,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003637,"byte_end":9003654,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003267,"byte_end":9003292,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003293,"byte_end":9003296,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003297,"byte_end":9003313,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003314,"byte_end":9003321,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003322,"byte_end":9003345,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003346,"byte_end":9003397,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003398,"byte_end":9003449,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003450,"byte_end":9003496,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003497,"byte_end":9003536,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003537,"byte_end":9003544,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003545,"byte_end":9003556,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003557,"byte_end":9003574,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004159,"byte_end":9004178,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003729,"byte_end":9003777,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003778,"byte_end":9003781,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003782,"byte_end":9003798,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003799,"byte_end":9003806,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003807,"byte_end":9003830,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003831,"byte_end":9003882,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003883,"byte_end":9003934,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003935,"byte_end":9003983,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9003984,"byte_end":9004058,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004059,"byte_end":9004066,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004067,"byte_end":9004078,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004079,"byte_end":9004096,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004629,"byte_end":9004646,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004253,"byte_end":9004277,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004278,"byte_end":9004281,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004282,"byte_end":9004298,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004299,"byte_end":9004306,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004307,"byte_end":9004330,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004331,"byte_end":9004382,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004383,"byte_end":9004434,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004435,"byte_end":9004481,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004482,"byte_end":9004528,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004529,"byte_end":9004536,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004537,"byte_end":9004548,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004549,"byte_end":9004566,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005150,"byte_end":9005169,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004721,"byte_end":9004768,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004769,"byte_end":9004772,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004773,"byte_end":9004789,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004790,"byte_end":9004797,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004798,"byte_end":9004821,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004822,"byte_end":9004873,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004874,"byte_end":9004925,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004926,"byte_end":9004974,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9004975,"byte_end":9005049,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005050,"byte_end":9005057,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005058,"byte_end":9005069,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005070,"byte_end":9005087,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005621,"byte_end":9005638,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005244,"byte_end":9005269,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005270,"byte_end":9005273,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005274,"byte_end":9005290,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005291,"byte_end":9005298,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005299,"byte_end":9005322,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005323,"byte_end":9005374,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005375,"byte_end":9005426,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005427,"byte_end":9005473,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005474,"byte_end":9005520,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005521,"byte_end":9005528,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005529,"byte_end":9005540,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005541,"byte_end":9005558,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006143,"byte_end":9006162,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005713,"byte_end":9005761,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005762,"byte_end":9005765,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005766,"byte_end":9005782,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005783,"byte_end":9005790,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005791,"byte_end":9005814,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005815,"byte_end":9005866,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005867,"byte_end":9005918,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005919,"byte_end":9005967,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9005968,"byte_end":9006042,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006043,"byte_end":9006050,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006051,"byte_end":9006062,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006063,"byte_end":9006080,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006620,"byte_end":9006637,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006237,"byte_end":9006261,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006262,"byte_end":9006265,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006266,"byte_end":9006282,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006283,"byte_end":9006290,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006291,"byte_end":9006314,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006315,"byte_end":9006366,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006367,"byte_end":9006418,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006419,"byte_end":9006465,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006466,"byte_end":9006519,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006520,"byte_end":9006527,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006528,"byte_end":9006539,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006540,"byte_end":9006557,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007141,"byte_end":9007160,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006712,"byte_end":9006759,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006760,"byte_end":9006763,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006764,"byte_end":9006780,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006781,"byte_end":9006788,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006789,"byte_end":9006812,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006813,"byte_end":9006864,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006865,"byte_end":9006916,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006917,"byte_end":9006965,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9006966,"byte_end":9007040,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007041,"byte_end":9007048,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007049,"byte_end":9007060,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007061,"byte_end":9007078,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007649,"byte_end":9007670,"line_start":418,"line_end":418,"column_start":8,"column_end":29},"name":"cmp_ordered_mask_m128","qualname":"::x86_x64::sse::cmp_ordered_mask_m128","value":"pub fn cmp_ordered_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007235,"byte_end":9007280,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007281,"byte_end":9007284,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007285,"byte_end":9007301,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007302,"byte_end":9007309,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007310,"byte_end":9007333,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007334,"byte_end":9007395,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007396,"byte_end":9007457,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordered_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007458,"byte_end":9007508,"line_start":412,"line_end":412,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007509,"byte_end":9007548,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007549,"byte_end":9007556,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007557,"byte_end":9007568,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007569,"byte_end":9007586,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008221,"byte_end":9008244,"line_start":435,"line_end":435,"column_start":8,"column_end":31},"name":"cmp_ordered_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordered_mask_m128_s","value":"pub fn cmp_ordered_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007745,"byte_end":9007813,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007814,"byte_end":9007817,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007818,"byte_end":9007834,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007835,"byte_end":9007842,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007843,"byte_end":9007866,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007867,"byte_end":9007918,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007919,"byte_end":9007985,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordered_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9007986,"byte_end":9008038,"line_start":429,"line_end":429,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008039,"byte_end":9008120,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008121,"byte_end":9008128,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008129,"byte_end":9008140,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008141,"byte_end":9008158,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008739,"byte_end":9008758,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008319,"byte_end":9008358,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008359,"byte_end":9008362,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008363,"byte_end":9008379,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008380,"byte_end":9008387,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008388,"byte_end":9008411,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008412,"byte_end":9008473,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008474,"byte_end":9008535,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008536,"byte_end":9008584,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008585,"byte_end":9008638,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008639,"byte_end":9008646,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008647,"byte_end":9008658,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008659,"byte_end":9008676,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009296,"byte_end":9009317,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008835,"byte_end":9008897,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008898,"byte_end":9008901,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008902,"byte_end":9008918,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008919,"byte_end":9008926,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008927,"byte_end":9008950,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9008951,"byte_end":9009002,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009003,"byte_end":9009069,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009070,"byte_end":9009120,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009121,"byte_end":9009195,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009196,"byte_end":9009203,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009204,"byte_end":9009215,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009216,"byte_end":9009233,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009723,"byte_end":9009740,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009394,"byte_end":9009416,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009417,"byte_end":9009420,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009421,"byte_end":9009438,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009439,"byte_end":9009446,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009447,"byte_end":9009470,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009471,"byte_end":9009522,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009523,"byte_end":9009574,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009575,"byte_end":9009622,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009623,"byte_end":9009630,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009631,"byte_end":9009642,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009643,"byte_end":9009660,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010153,"byte_end":9010170,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009808,"byte_end":9009846,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009847,"byte_end":9009850,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009851,"byte_end":9009868,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009869,"byte_end":9009876,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009877,"byte_end":9009900,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009901,"byte_end":9009952,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9009953,"byte_end":9010004,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010005,"byte_end":9010052,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010053,"byte_end":9010060,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010061,"byte_end":9010072,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010073,"byte_end":9010090,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010571,"byte_end":9010588,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010238,"byte_end":9010264,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010265,"byte_end":9010268,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010269,"byte_end":9010286,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010287,"byte_end":9010294,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010295,"byte_end":9010318,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010319,"byte_end":9010370,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010371,"byte_end":9010422,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010423,"byte_end":9010470,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010471,"byte_end":9010478,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010479,"byte_end":9010490,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010491,"byte_end":9010508,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010998,"byte_end":9011015,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010656,"byte_end":9010691,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010692,"byte_end":9010695,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010696,"byte_end":9010713,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010714,"byte_end":9010721,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010722,"byte_end":9010745,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010746,"byte_end":9010797,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010798,"byte_end":9010849,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010850,"byte_end":9010897,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010898,"byte_end":9010905,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010906,"byte_end":9010917,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9010918,"byte_end":9010935,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011413,"byte_end":9011430,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011083,"byte_end":9011106,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011107,"byte_end":9011110,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011111,"byte_end":9011128,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011129,"byte_end":9011136,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011137,"byte_end":9011160,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011161,"byte_end":9011212,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011213,"byte_end":9011264,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011265,"byte_end":9011312,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011313,"byte_end":9011320,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011321,"byte_end":9011332,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011333,"byte_end":9011350,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011832,"byte_end":9011850,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011498,"byte_end":9011524,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011525,"byte_end":9011528,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011529,"byte_end":9011546,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011547,"byte_end":9011554,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011555,"byte_end":9011578,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011579,"byte_end":9011630,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011631,"byte_end":9011682,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011683,"byte_end":9011731,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011732,"byte_end":9011739,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011740,"byte_end":9011751,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011752,"byte_end":9011769,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012351,"byte_end":9012377,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011919,"byte_end":9011984,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011985,"byte_end":9011992,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9011993,"byte_end":9012016,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012017,"byte_end":9012068,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012069,"byte_end":9012129,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012130,"byte_end":9012170,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012171,"byte_end":9012178,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012179,"byte_end":9012218,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012219,"byte_end":9012258,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012259,"byte_end":9012270,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9012271,"byte_end":9012288,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013288,"byte_end":9013307,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013005,"byte_end":9013056,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013057,"byte_end":9013064,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013065,"byte_end":9013088,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013089,"byte_end":9013140,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013141,"byte_end":9013187,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013188,"byte_end":9013195,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013196,"byte_end":9013207,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013208,"byte_end":9013225,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013664,"byte_end":9013683,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013361,"byte_end":9013432,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013433,"byte_end":9013440,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013441,"byte_end":9013464,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013465,"byte_end":9013516,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013517,"byte_end":9013563,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013564,"byte_end":9013571,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013572,"byte_end":9013583,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9013584,"byte_end":9013601,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014483,"byte_end":9014491,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014140,"byte_end":9014161,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014162,"byte_end":9014169,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014170,"byte_end":9014193,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014194,"byte_end":9014249,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014250,"byte_end":9014302,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014303,"byte_end":9014341,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014342,"byte_end":9014382,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014383,"byte_end":9014390,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014391,"byte_end":9014402,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014403,"byte_end":9014420,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014934,"byte_end":9014944,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014563,"byte_end":9014607,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014608,"byte_end":9014615,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014616,"byte_end":9014639,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014640,"byte_end":9014695,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014696,"byte_end":9014748,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014749,"byte_end":9014789,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014790,"byte_end":9014833,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014834,"byte_end":9014841,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014842,"byte_end":9014853,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9014854,"byte_end":9014871,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015314,"byte_end":9015323,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015016,"byte_end":9015056,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015057,"byte_end":9015064,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015065,"byte_end":9015088,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015089,"byte_end":9015144,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015145,"byte_end":9015171,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015172,"byte_end":9015213,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015214,"byte_end":9015221,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015222,"byte_end":9015233,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015234,"byte_end":9015251,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015780,"byte_end":9015799,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015410,"byte_end":9015469,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015470,"byte_end":9015477,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015478,"byte_end":9015501,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015502,"byte_end":9015518,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015519,"byte_end":9015555,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015556,"byte_end":9015634,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015635,"byte_end":9015642,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015643,"byte_end":9015654,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015655,"byte_end":9015672,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015673,"byte_end":9015717,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016288,"byte_end":9016303,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015917,"byte_end":9015981,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015982,"byte_end":9015989,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9015990,"byte_end":9016013,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016014,"byte_end":9016030,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016031,"byte_end":9016063,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016064,"byte_end":9016142,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016143,"byte_end":9016150,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016151,"byte_end":9016162,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016163,"byte_end":9016180,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016181,"byte_end":9016225,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016727,"byte_end":9016744,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016360,"byte_end":9016420,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016421,"byte_end":9016428,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016429,"byte_end":9016452,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016453,"byte_end":9016508,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016509,"byte_end":9016543,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016544,"byte_end":9016626,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016627,"byte_end":9016634,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016635,"byte_end":9016646,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016647,"byte_end":9016664,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017317,"byte_end":9017336,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016832,"byte_end":9016872,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016873,"byte_end":9016876,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016877,"byte_end":9016955,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9016956,"byte_end":9017036,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017037,"byte_end":9017049,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017050,"byte_end":9017057,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017058,"byte_end":9017081,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017082,"byte_end":9017119,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017120,"byte_end":9017156,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017157,"byte_end":9017216,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017217,"byte_end":9017224,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017225,"byte_end":9017236,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017237,"byte_end":9017254,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017776,"byte_end":9017784,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017432,"byte_end":9017457,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017458,"byte_end":9017465,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017466,"byte_end":9017489,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017490,"byte_end":9017542,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017543,"byte_end":9017594,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017595,"byte_end":9017633,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017634,"byte_end":9017675,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017676,"byte_end":9017683,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017684,"byte_end":9017695,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017696,"byte_end":9017713,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018225,"byte_end":9018235,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017856,"byte_end":9017904,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017905,"byte_end":9017912,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017913,"byte_end":9017936,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017937,"byte_end":9017989,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9017990,"byte_end":9018041,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018042,"byte_end":9018082,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018083,"byte_end":9018124,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018125,"byte_end":9018132,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018133,"byte_end":9018144,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018145,"byte_end":9018162,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018650,"byte_end":9018658,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018307,"byte_end":9018332,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018333,"byte_end":9018340,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018341,"byte_end":9018364,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018365,"byte_end":9018417,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018418,"byte_end":9018469,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018470,"byte_end":9018508,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018509,"byte_end":9018549,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018550,"byte_end":9018557,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018558,"byte_end":9018569,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018570,"byte_end":9018587,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019099,"byte_end":9019109,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018730,"byte_end":9018778,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018779,"byte_end":9018786,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018787,"byte_end":9018810,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018811,"byte_end":9018863,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018864,"byte_end":9018915,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018916,"byte_end":9018956,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018957,"byte_end":9018998,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9018999,"byte_end":9019006,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019007,"byte_end":9019018,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019019,"byte_end":9019036,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019562,"byte_end":9019573,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019181,"byte_end":9019240,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019241,"byte_end":9019248,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019249,"byte_end":9019272,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019273,"byte_end":9019325,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019326,"byte_end":9019377,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019378,"byte_end":9019419,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019420,"byte_end":9019461,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019462,"byte_end":9019469,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019470,"byte_end":9019481,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019482,"byte_end":9019499,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020052,"byte_end":9020070,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019646,"byte_end":9019724,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019725,"byte_end":9019732,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019733,"byte_end":9019756,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019757,"byte_end":9019809,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019810,"byte_end":9019861,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019862,"byte_end":9019910,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019911,"byte_end":9019951,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019952,"byte_end":9019959,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019960,"byte_end":9019971,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9019972,"byte_end":9019989,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020552,"byte_end":9020570,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020145,"byte_end":9020223,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020224,"byte_end":9020231,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020232,"byte_end":9020255,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020256,"byte_end":9020308,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020309,"byte_end":9020360,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020361,"byte_end":9020409,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020410,"byte_end":9020451,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020452,"byte_end":9020459,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020460,"byte_end":9020471,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020472,"byte_end":9020489,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020998,"byte_end":9021012,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020645,"byte_end":9020683,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020684,"byte_end":9020687,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020688,"byte_end":9020751,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020752,"byte_end":9020759,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020760,"byte_end":9020783,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020784,"byte_end":9020839,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020840,"byte_end":9020870,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020871,"byte_end":9020897,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020898,"byte_end":9020905,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020906,"byte_end":9020917,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9020918,"byte_end":9020935,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021409,"byte_end":9021417,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021068,"byte_end":9021089,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021090,"byte_end":9021097,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021098,"byte_end":9021121,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021122,"byte_end":9021173,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021174,"byte_end":9021225,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021226,"byte_end":9021264,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021265,"byte_end":9021308,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021309,"byte_end":9021316,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021317,"byte_end":9021328,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021329,"byte_end":9021346,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021852,"byte_end":9021862,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021489,"byte_end":9021533,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021534,"byte_end":9021541,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021542,"byte_end":9021565,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021566,"byte_end":9021617,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021618,"byte_end":9021669,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021670,"byte_end":9021710,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021711,"byte_end":9021751,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021752,"byte_end":9021759,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021760,"byte_end":9021771,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021772,"byte_end":9021789,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022273,"byte_end":9022283,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021934,"byte_end":9021954,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021955,"byte_end":9021962,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021963,"byte_end":9021986,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9021987,"byte_end":9022038,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022039,"byte_end":9022090,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022091,"byte_end":9022131,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022132,"byte_end":9022172,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022173,"byte_end":9022180,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022181,"byte_end":9022192,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022193,"byte_end":9022210,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022740,"byte_end":9022755,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022354,"byte_end":9022391,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022392,"byte_end":9022399,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022400,"byte_end":9022423,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022424,"byte_end":9022475,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022476,"byte_end":9022518,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022519,"byte_end":9022562,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022563,"byte_end":9022582,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022583,"byte_end":9022633,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022634,"byte_end":9022639,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022640,"byte_end":9022647,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022648,"byte_end":9022659,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022660,"byte_end":9022677,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023221,"byte_end":9023238,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022813,"byte_end":9022873,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022874,"byte_end":9022881,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022882,"byte_end":9022905,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022906,"byte_end":9022957,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9022958,"byte_end":9023002,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023003,"byte_end":9023043,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023044,"byte_end":9023063,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023064,"byte_end":9023114,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023115,"byte_end":9023120,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023121,"byte_end":9023128,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023129,"byte_end":9023140,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023141,"byte_end":9023158,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023697,"byte_end":9023717,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023296,"byte_end":9023339,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023340,"byte_end":9023347,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023348,"byte_end":9023371,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023372,"byte_end":9023425,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023426,"byte_end":9023473,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023474,"byte_end":9023519,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023520,"byte_end":9023539,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023540,"byte_end":9023590,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023591,"byte_end":9023596,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023597,"byte_end":9023604,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023605,"byte_end":9023616,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023617,"byte_end":9023634,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024200,"byte_end":9024222,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023777,"byte_end":9023843,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023844,"byte_end":9023851,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023852,"byte_end":9023875,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023876,"byte_end":9023929,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023930,"byte_end":9023979,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9023980,"byte_end":9024022,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024023,"byte_end":9024042,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024043,"byte_end":9024093,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024094,"byte_end":9024099,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024100,"byte_end":9024107,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024108,"byte_end":9024119,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024120,"byte_end":9024137,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024614,"byte_end":9024622,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024282,"byte_end":9024343,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024344,"byte_end":9024351,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024352,"byte_end":9024375,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024376,"byte_end":9024428,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024429,"byte_end":9024491,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024492,"byte_end":9024513,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024514,"byte_end":9024521,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024522,"byte_end":9024533,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024534,"byte_end":9024551,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025051,"byte_end":9025061,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024732,"byte_end":9024793,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024794,"byte_end":9024801,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024802,"byte_end":9024825,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024826,"byte_end":9024865,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024866,"byte_end":9024928,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024929,"byte_end":9024950,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024951,"byte_end":9024958,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024959,"byte_end":9024970,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9024971,"byte_end":9024988,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025416,"byte_end":9025430,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025120,"byte_end":9025154,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025155,"byte_end":9025162,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025163,"byte_end":9025186,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025187,"byte_end":9025230,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025231,"byte_end":9025293,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025294,"byte_end":9025315,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025316,"byte_end":9025323,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025324,"byte_end":9025335,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025336,"byte_end":9025353,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025830,"byte_end":9025847,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025490,"byte_end":9025550,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025551,"byte_end":9025558,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025559,"byte_end":9025582,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025583,"byte_end":9025644,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025645,"byte_end":9025707,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025708,"byte_end":9025729,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025730,"byte_end":9025737,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025738,"byte_end":9025749,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025750,"byte_end":9025767,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026189,"byte_end":9026200,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025958,"byte_end":9025977,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025978,"byte_end":9025985,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9025986,"byte_end":9026009,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026010,"byte_end":9026047,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026048,"byte_end":9026088,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026089,"byte_end":9026096,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026097,"byte_end":9026108,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026109,"byte_end":9026126,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027494,"byte_end":9027518,"line_start":1081,"line_end":1081,"column_start":8,"column_end":32},"name":"shuffle_abi_f32_all_m128","qualname":"::x86_x64::sse::shuffle_abi_f32_all_m128","value":"pub fn shuffle_abi_f32_all_m128<const MASK: i32>(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f32` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f32` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026252,"byte_end":9026326,"line_start":1052,"line_end":1052,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026327,"byte_end":9026345,"line_start":1053,"line_end":1053,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026346,"byte_end":9026349,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026350,"byte_end":9026429,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026430,"byte_end":9026507,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026508,"byte_end":9026588,"line_start":1057,"line_end":1057,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026589,"byte_end":9026592,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026593,"byte_end":9026670,"line_start":1059,"line_end":1059,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026671,"byte_end":9026748,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f32_all_m128`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026749,"byte_end":9026825,"line_start":1061,"line_end":1061,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026826,"byte_end":9026833,"line_start":1062,"line_end":1062,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026834,"byte_end":9026857,"line_start":1063,"line_end":1063,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026858,"byte_end":9026909,"line_start":1064,"line_end":1064,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026910,"byte_end":9026961,"line_start":1065,"line_end":1065,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026962,"byte_end":9026968,"line_start":1066,"line_end":1066,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0>(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9026969,"byte_end":9027028,"line_start":1067,"line_end":1067,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1.0, 1.0, 5.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027029,"byte_end":9027069,"line_start":1068,"line_end":1068,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027070,"byte_end":9027076,"line_start":1069,"line_end":1069,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b11_10_01_00>(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027077,"byte_end":9027148,"line_start":1070,"line_end":1070,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [1.0, 2.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027149,"byte_end":9027189,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027190,"byte_end":9027196,"line_start":1072,"line_end":1072,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b00_10_10_01>(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027197,"byte_end":9027268,"line_start":1073,"line_end":1073,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [2.0, 3.0, 7.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027269,"byte_end":9027309,"line_start":1074,"line_end":1074,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027310,"byte_end":9027317,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_ps`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027318,"byte_end":9027357,"line_start":1076,"line_end":1076,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `shufps xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027358,"byte_end":9027401,"line_start":1077,"line_end":1077,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027402,"byte_end":9027413,"line_start":1078,"line_end":1078,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027414,"byte_end":9027431,"line_start":1079,"line_end":1079,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027905,"byte_end":9027914,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027617,"byte_end":9027640,"line_start":1085,"line_end":1085,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027641,"byte_end":9027648,"line_start":1086,"line_end":1086,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027649,"byte_end":9027672,"line_start":1087,"line_end":1087,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027673,"byte_end":9027726,"line_start":1088,"line_end":1088,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027727,"byte_end":9027763,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027764,"byte_end":9027804,"line_start":1090,"line_end":1090,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027805,"byte_end":9027812,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027813,"byte_end":9027824,"line_start":1092,"line_end":1092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027825,"byte_end":9027842,"line_start":1093,"line_end":1093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028284,"byte_end":9028295,"line_start":1109,"line_end":1109,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9027973,"byte_end":9028019,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028020,"byte_end":9028027,"line_start":1100,"line_end":1100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028028,"byte_end":9028051,"line_start":1101,"line_end":1101,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028052,"byte_end":9028103,"line_start":1102,"line_end":1102,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028104,"byte_end":9028142,"line_start":1103,"line_end":1103,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028143,"byte_end":9028183,"line_start":1104,"line_end":1104,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028184,"byte_end":9028191,"line_start":1105,"line_end":1105,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028192,"byte_end":9028203,"line_start":1106,"line_end":1106,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028204,"byte_end":9028221,"line_start":1107,"line_end":1107,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028704,"byte_end":9028714,"line_start":1124,"line_end":1124,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028354,"byte_end":9028398,"line_start":1113,"line_end":1113,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028399,"byte_end":9028406,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028407,"byte_end":9028430,"line_start":1115,"line_end":1115,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028431,"byte_end":9028486,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028487,"byte_end":9028517,"line_start":1117,"line_end":1117,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028518,"byte_end":9028544,"line_start":1118,"line_end":1118,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028545,"byte_end":9028570,"line_start":1119,"line_end":1119,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028571,"byte_end":9028615,"line_start":1120,"line_end":1120,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028616,"byte_end":9028623,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028624,"byte_end":9028641,"line_start":1122,"line_end":1122,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029107,"byte_end":9029119,"line_start":1138,"line_end":1138,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028802,"byte_end":9028855,"line_start":1128,"line_end":1128,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028856,"byte_end":9028863,"line_start":1129,"line_end":1129,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028864,"byte_end":9028887,"line_start":1130,"line_end":1130,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028888,"byte_end":9028943,"line_start":1131,"line_end":1131,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028944,"byte_end":9028964,"line_start":1132,"line_end":1132,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028965,"byte_end":9028993,"line_start":1133,"line_end":1133,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9028994,"byte_end":9029018,"line_start":1134,"line_end":1134,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029019,"byte_end":9029026,"line_start":1135,"line_end":1135,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029027,"byte_end":9029044,"line_start":1136,"line_end":1136,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029571,"byte_end":9029587,"line_start":1153,"line_end":1153,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029193,"byte_end":9029259,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029260,"byte_end":9029267,"line_start":1143,"line_end":1143,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029268,"byte_end":9029291,"line_start":1144,"line_end":1144,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029292,"byte_end":9029347,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029348,"byte_end":9029378,"line_start":1146,"line_end":1146,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029379,"byte_end":9029411,"line_start":1147,"line_end":1147,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029412,"byte_end":9029437,"line_start":1148,"line_end":1148,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029438,"byte_end":9029482,"line_start":1149,"line_end":1149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029483,"byte_end":9029490,"line_start":1150,"line_end":1150,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029491,"byte_end":9029508,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030051,"byte_end":9030069,"line_start":1168,"line_end":1168,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029676,"byte_end":9029737,"line_start":1157,"line_end":1157,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029738,"byte_end":9029745,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029746,"byte_end":9029769,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029770,"byte_end":9029825,"line_start":1160,"line_end":1160,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029826,"byte_end":9029856,"line_start":1161,"line_end":1161,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029857,"byte_end":9029891,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029892,"byte_end":9029917,"line_start":1163,"line_end":1163,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029918,"byte_end":9029962,"line_start":1164,"line_end":1164,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029963,"byte_end":9029970,"line_start":1165,"line_end":1165,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9029971,"byte_end":9029988,"line_start":1166,"line_end":1166,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030664,"byte_end":9030684,"line_start":1186,"line_end":1186,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030158,"byte_end":9030202,"line_start":1172,"line_end":1172,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030203,"byte_end":9030206,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030207,"byte_end":9030285,"line_start":1174,"line_end":1174,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030286,"byte_end":9030366,"line_start":1175,"line_end":1175,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030367,"byte_end":9030379,"line_start":1176,"line_end":1176,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030380,"byte_end":9030387,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030388,"byte_end":9030411,"line_start":1178,"line_end":1178,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030412,"byte_end":9030467,"line_start":1179,"line_end":1179,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030468,"byte_end":9030493,"line_start":1180,"line_end":1180,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030494,"byte_end":9030530,"line_start":1181,"line_end":1181,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030531,"byte_end":9030575,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030576,"byte_end":9030583,"line_start":1183,"line_end":1183,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030584,"byte_end":9030601,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031107,"byte_end":9031115,"line_start":1201,"line_end":1201,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030765,"byte_end":9030786,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030787,"byte_end":9030794,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030795,"byte_end":9030818,"line_start":1192,"line_end":1192,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030819,"byte_end":9030870,"line_start":1193,"line_end":1193,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030871,"byte_end":9030923,"line_start":1194,"line_end":1194,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030924,"byte_end":9030962,"line_start":1195,"line_end":1195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9030963,"byte_end":9031006,"line_start":1196,"line_end":1196,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031007,"byte_end":9031014,"line_start":1197,"line_end":1197,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031015,"byte_end":9031026,"line_start":1198,"line_end":1198,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031027,"byte_end":9031044,"line_start":1199,"line_end":1199,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031552,"byte_end":9031562,"line_start":1216,"line_end":1216,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031187,"byte_end":9031231,"line_start":1205,"line_end":1205,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031232,"byte_end":9031239,"line_start":1206,"line_end":1206,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031240,"byte_end":9031263,"line_start":1207,"line_end":1207,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031264,"byte_end":9031315,"line_start":1208,"line_end":1208,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031316,"byte_end":9031368,"line_start":1209,"line_end":1209,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031369,"byte_end":9031409,"line_start":1210,"line_end":1210,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031410,"byte_end":9031451,"line_start":1211,"line_end":1211,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031452,"byte_end":9031459,"line_start":1212,"line_end":1212,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031460,"byte_end":9031471,"line_start":1213,"line_end":1213,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031472,"byte_end":9031489,"line_start":1214,"line_end":1214,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032313,"byte_end":9032332,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031634,"byte_end":9031689,"line_start":1220,"line_end":1220,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031690,"byte_end":9031697,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031698,"byte_end":9031721,"line_start":1222,"line_end":1222,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031722,"byte_end":9031777,"line_start":1223,"line_end":1223,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031778,"byte_end":9031833,"line_start":1224,"line_end":1224,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031834,"byte_end":9031892,"line_start":1225,"line_end":1225,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031893,"byte_end":9031952,"line_start":1226,"line_end":1226,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9031953,"byte_end":9032009,"line_start":1227,"line_end":1227,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032010,"byte_end":9032062,"line_start":1228,"line_end":1228,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032063,"byte_end":9032116,"line_start":1229,"line_end":1229,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032117,"byte_end":9032170,"line_start":1230,"line_end":1230,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032171,"byte_end":9032224,"line_start":1231,"line_end":1231,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032225,"byte_end":9032232,"line_start":1232,"line_end":1232,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032233,"byte_end":9032250,"line_start":1233,"line_end":1233,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032842,"byte_end":9032858,"line_start":1250,"line_end":1250,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032465,"byte_end":9032517,"line_start":1239,"line_end":1239,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032518,"byte_end":9032525,"line_start":1240,"line_end":1240,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032526,"byte_end":9032549,"line_start":1241,"line_end":1241,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032550,"byte_end":9032601,"line_start":1242,"line_end":1242,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032602,"byte_end":9032653,"line_start":1243,"line_end":1243,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032654,"byte_end":9032700,"line_start":1244,"line_end":1244,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032701,"byte_end":9032741,"line_start":1245,"line_end":1245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032742,"byte_end":9032749,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032750,"byte_end":9032761,"line_start":1247,"line_end":1247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032762,"byte_end":9032779,"line_start":1248,"line_end":1248,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033310,"byte_end":9033325,"line_start":1265,"line_end":1265,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032935,"byte_end":9032986,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032987,"byte_end":9032994,"line_start":1255,"line_end":1255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9032995,"byte_end":9033018,"line_start":1256,"line_end":1256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033019,"byte_end":9033070,"line_start":1257,"line_end":1257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033071,"byte_end":9033122,"line_start":1258,"line_end":1258,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033123,"byte_end":9033168,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033169,"byte_end":9033209,"line_start":1260,"line_end":1260,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033210,"byte_end":9033217,"line_start":1261,"line_end":1261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033218,"byte_end":9033229,"line_start":1262,"line_end":1262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033230,"byte_end":9033247,"line_start":1263,"line_end":1263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033742,"byte_end":9033753,"line_start":1280,"line_end":1280,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033402,"byte_end":9033422,"line_start":1269,"line_end":1269,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033423,"byte_end":9033430,"line_start":1270,"line_end":1270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033431,"byte_end":9033454,"line_start":1271,"line_end":1271,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033455,"byte_end":9033506,"line_start":1272,"line_end":1272,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033507,"byte_end":9033558,"line_start":1273,"line_end":1273,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033559,"byte_end":9033600,"line_start":1274,"line_end":1274,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033601,"byte_end":9033641,"line_start":1275,"line_end":1275,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033642,"byte_end":9033649,"line_start":1276,"line_end":1276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033650,"byte_end":9033661,"line_start":1277,"line_end":1277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9033662,"byte_end":9033679,"line_start":1278,"line_end":1278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039003,"byte_end":9039015,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038518,"byte_end":9038558,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038559,"byte_end":9038566,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038567,"byte_end":9038590,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038591,"byte_end":9038674,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038675,"byte_end":9038766,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038767,"byte_end":9038815,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038816,"byte_end":9038901,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038902,"byte_end":9038909,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038910,"byte_end":9038921,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9038922,"byte_end":9038939,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039493,"byte_end":9039506,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039093,"byte_end":9039134,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039135,"byte_end":9039142,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039143,"byte_end":9039166,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039167,"byte_end":9039225,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039226,"byte_end":9039287,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039288,"byte_end":9039337,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039338,"byte_end":9039391,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039392,"byte_end":9039399,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039400,"byte_end":9039411,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039412,"byte_end":9039429,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039923,"byte_end":9039936,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039585,"byte_end":9039626,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039627,"byte_end":9039634,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039635,"byte_end":9039658,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039659,"byte_end":9039697,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039698,"byte_end":9039736,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039737,"byte_end":9039786,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039787,"byte_end":9039821,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039822,"byte_end":9039829,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039830,"byte_end":9039841,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9039842,"byte_end":9039859,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040352,"byte_end":9040365,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040015,"byte_end":9040056,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040057,"byte_end":9040064,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040065,"byte_end":9040088,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040089,"byte_end":9040127,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040128,"byte_end":9040168,"line_start":54,"line_end":54,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040169,"byte_end":9040218,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040219,"byte_end":9040250,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040251,"byte_end":9040258,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040259,"byte_end":9040270,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040271,"byte_end":9040288,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040764,"byte_end":9040773,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040444,"byte_end":9040465,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040466,"byte_end":9040473,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040474,"byte_end":9040497,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040498,"byte_end":9040542,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040543,"byte_end":9040588,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040589,"byte_end":9040628,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040629,"byte_end":9040662,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040663,"byte_end":9040670,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040671,"byte_end":9040682,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040683,"byte_end":9040700,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041197,"byte_end":9041208,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040849,"byte_end":9040894,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040895,"byte_end":9040902,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040903,"byte_end":9040926,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040927,"byte_end":9040971,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9040972,"byte_end":9041019,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041020,"byte_end":9041061,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041062,"byte_end":9041095,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041096,"byte_end":9041103,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041104,"byte_end":9041115,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041116,"byte_end":9041133,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041931,"byte_end":9041954,"line_start":119,"line_end":119,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041284,"byte_end":9041335,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041336,"byte_end":9041343,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041344,"byte_end":9041367,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041368,"byte_end":9041393,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041394,"byte_end":9041439,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041440,"byte_end":9041475,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041476,"byte_end":9041483,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041484,"byte_end":9041509,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041510,"byte_end":9041558,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041559,"byte_end":9041599,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041600,"byte_end":9041607,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041608,"byte_end":9041667,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041668,"byte_end":9041683,"line_start":107,"line_end":107,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041684,"byte_end":9041692,"line_start":108,"line_end":108,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041693,"byte_end":9041700,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041701,"byte_end":9041753,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041754,"byte_end":9041797,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041798,"byte_end":9041805,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041806,"byte_end":9041812,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041813,"byte_end":9041820,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041821,"byte_end":9041832,"line_start":115,"line_end":115,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041833,"byte_end":9041850,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9041851,"byte_end":9041867,"line_start":117,"line_end":117,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042489,"byte_end":9042513,"line_start":134,"line_end":134,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042033,"byte_end":9042085,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042086,"byte_end":9042093,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042094,"byte_end":9042117,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042118,"byte_end":9042186,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042187,"byte_end":9042258,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042259,"byte_end":9042319,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042320,"byte_end":9042387,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042388,"byte_end":9042395,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042396,"byte_end":9042407,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042408,"byte_end":9042425,"line_start":132,"line_end":132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043202,"byte_end":9043225,"line_start":162,"line_end":162,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042593,"byte_end":9042644,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042645,"byte_end":9042652,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042653,"byte_end":9042676,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042677,"byte_end":9042702,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042703,"byte_end":9042740,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042741,"byte_end":9042772,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042773,"byte_end":9042780,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042781,"byte_end":9042806,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042807,"byte_end":9042846,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042847,"byte_end":9042882,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042883,"byte_end":9042890,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042891,"byte_end":9042950,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042951,"byte_end":9042966,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042967,"byte_end":9042975,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042976,"byte_end":9042983,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9042984,"byte_end":9043028,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043029,"byte_end":9043068,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043069,"byte_end":9043076,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043077,"byte_end":9043083,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043084,"byte_end":9043091,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043092,"byte_end":9043103,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043104,"byte_end":9043121,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043122,"byte_end":9043138,"line_start":160,"line_end":160,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043729,"byte_end":9043753,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043304,"byte_end":9043356,"line_start":166,"line_end":166,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043357,"byte_end":9043364,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043365,"byte_end":9043388,"line_start":168,"line_end":168,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043389,"byte_end":9043446,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043447,"byte_end":9043508,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043509,"byte_end":9043569,"line_start":171,"line_end":171,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043570,"byte_end":9043627,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043628,"byte_end":9043635,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043636,"byte_end":9043647,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043648,"byte_end":9043665,"line_start":175,"line_end":175,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044147,"byte_end":9044159,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043833,"byte_end":9043853,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043854,"byte_end":9043861,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043862,"byte_end":9043885,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043886,"byte_end":9043928,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043929,"byte_end":9043971,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9043972,"byte_end":9044014,"line_start":186,"line_end":186,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044015,"byte_end":9044045,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044046,"byte_end":9044053,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044054,"byte_end":9044065,"line_start":189,"line_end":189,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044066,"byte_end":9044083,"line_start":190,"line_end":190,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044549,"byte_end":9044561,"line_start":207,"line_end":207,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044235,"byte_end":9044255,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044256,"byte_end":9044263,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044264,"byte_end":9044287,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044288,"byte_end":9044326,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044327,"byte_end":9044365,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044366,"byte_end":9044414,"line_start":201,"line_end":201,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044415,"byte_end":9044447,"line_start":202,"line_end":202,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044448,"byte_end":9044455,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044456,"byte_end":9044467,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044468,"byte_end":9044485,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044960,"byte_end":9044975,"line_start":222,"line_end":222,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044640,"byte_end":9044663,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044664,"byte_end":9044671,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044672,"byte_end":9044695,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044696,"byte_end":9044738,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044739,"byte_end":9044781,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044782,"byte_end":9044827,"line_start":216,"line_end":216,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044828,"byte_end":9044858,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044859,"byte_end":9044866,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044867,"byte_end":9044878,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9044879,"byte_end":9044896,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045374,"byte_end":9045389,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045054,"byte_end":9045077,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045078,"byte_end":9045085,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045086,"byte_end":9045109,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045110,"byte_end":9045148,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045149,"byte_end":9045187,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045188,"byte_end":9045239,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045240,"byte_end":9045272,"line_start":232,"line_end":232,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045273,"byte_end":9045280,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045281,"byte_end":9045292,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045293,"byte_end":9045310,"line_start":235,"line_end":235,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046055,"byte_end":9046071,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045471,"byte_end":9045511,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045512,"byte_end":9045519,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045520,"byte_end":9045543,"line_start":243,"line_end":243,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045544,"byte_end":9045569,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045570,"byte_end":9045607,"line_start":245,"line_end":245,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045608,"byte_end":9045639,"line_start":246,"line_end":246,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045640,"byte_end":9045647,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045648,"byte_end":9045673,"line_start":248,"line_end":248,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045674,"byte_end":9045713,"line_start":249,"line_end":249,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045714,"byte_end":9045749,"line_start":250,"line_end":250,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045750,"byte_end":9045757,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045758,"byte_end":9045810,"line_start":252,"line_end":252,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045811,"byte_end":9045826,"line_start":253,"line_end":253,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045827,"byte_end":9045835,"line_start":254,"line_end":254,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045836,"byte_end":9045843,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045844,"byte_end":9045886,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045887,"byte_end":9045921,"line_start":257,"line_end":257,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045922,"byte_end":9045929,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045930,"byte_end":9045936,"line_start":259,"line_end":259,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045937,"byte_end":9045944,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045945,"byte_end":9045956,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045957,"byte_end":9045974,"line_start":262,"line_end":262,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9045975,"byte_end":9045991,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046553,"byte_end":9046570,"line_start":280,"line_end":280,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046149,"byte_end":9046190,"line_start":269,"line_end":269,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046191,"byte_end":9046198,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046199,"byte_end":9046222,"line_start":271,"line_end":271,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046223,"byte_end":9046280,"line_start":272,"line_end":272,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046281,"byte_end":9046342,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046343,"byte_end":9046396,"line_start":274,"line_end":274,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046397,"byte_end":9046451,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046452,"byte_end":9046459,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046460,"byte_end":9046471,"line_start":277,"line_end":277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046472,"byte_end":9046489,"line_start":278,"line_end":278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047052,"byte_end":9047075,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"byte_shl_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shl_imm_u128_m128i","value":"pub fn byte_shl_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register left by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register left by a number of **bytes**.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046649,"byte_end":9046722,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046723,"byte_end":9046726,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046727,"byte_end":9046734,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046735,"byte_end":9046758,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046759,"byte_end":9046827,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046828,"byte_end":9046834,"line_start":289,"line_end":289,"column_start":1,"column_end":7}},{"value":"/ let b: u128 = byte_shl_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046835,"byte_end":9046892,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(b, 0x00000B00_00000A00_00000F11_11111100);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046893,"byte_end":9046950,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046951,"byte_end":9046958,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046959,"byte_end":9046970,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9046971,"byte_end":9046988,"line_start":294,"line_end":294,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047566,"byte_end":9047589,"line_start":312,"line_end":312,"column_start":8,"column_end":31},"name":"byte_shr_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shr_imm_u128_m128i","value":"pub fn byte_shr_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register right by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register right by a number of **bytes**.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047162,"byte_end":9047236,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047237,"byte_end":9047240,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047241,"byte_end":9047248,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047249,"byte_end":9047272,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047273,"byte_end":9047341,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047342,"byte_end":9047348,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ let c: u128 = byte_shr_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047349,"byte_end":9047406,"line_start":306,"line_end":306,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, 0x00000000_0B000000_0A000000_0F111111);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047407,"byte_end":9047464,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047465,"byte_end":9047472,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047473,"byte_end":9047484,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047485,"byte_end":9047502,"line_start":310,"line_end":310,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048010,"byte_end":9048033,"line_start":326,"line_end":326,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047676,"byte_end":9047722,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047723,"byte_end":9047730,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047731,"byte_end":9047754,"line_start":318,"line_end":318,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047755,"byte_end":9047797,"line_start":319,"line_end":319,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047798,"byte_end":9047857,"line_start":320,"line_end":320,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047858,"byte_end":9047908,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047909,"byte_end":9047916,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047917,"byte_end":9047928,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9047929,"byte_end":9047946,"line_start":324,"line_end":324,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048428,"byte_end":9048452,"line_start":340,"line_end":340,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048095,"byte_end":9048142,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048143,"byte_end":9048150,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048151,"byte_end":9048174,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048175,"byte_end":9048217,"line_start":333,"line_end":333,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048218,"byte_end":9048275,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048276,"byte_end":9048326,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048327,"byte_end":9048334,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048335,"byte_end":9048346,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048347,"byte_end":9048364,"line_start":338,"line_end":338,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048872,"byte_end":9048895,"line_start":354,"line_end":354,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048519,"byte_end":9048565,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048566,"byte_end":9048573,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048574,"byte_end":9048597,"line_start":346,"line_end":346,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048598,"byte_end":9048649,"line_start":347,"line_end":347,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048650,"byte_end":9048709,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048710,"byte_end":9048770,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048771,"byte_end":9048778,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048779,"byte_end":9048790,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048791,"byte_end":9048808,"line_start":352,"line_end":352,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049316,"byte_end":9049339,"line_start":368,"line_end":368,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9048958,"byte_end":9049004,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049005,"byte_end":9049012,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049013,"byte_end":9049036,"line_start":360,"line_end":360,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049037,"byte_end":9049088,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049089,"byte_end":9049145,"line_start":362,"line_end":362,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049146,"byte_end":9049214,"line_start":363,"line_end":363,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049215,"byte_end":9049222,"line_start":364,"line_end":364,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049223,"byte_end":9049234,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049235,"byte_end":9049252,"line_start":366,"line_end":366,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049733,"byte_end":9049757,"line_start":382,"line_end":382,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049405,"byte_end":9049452,"line_start":372,"line_end":372,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049453,"byte_end":9049460,"line_start":373,"line_end":373,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049461,"byte_end":9049484,"line_start":374,"line_end":374,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049485,"byte_end":9049523,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049524,"byte_end":9049584,"line_start":376,"line_end":376,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049585,"byte_end":9049631,"line_start":377,"line_end":377,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049632,"byte_end":9049639,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049640,"byte_end":9049651,"line_start":379,"line_end":379,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049652,"byte_end":9049669,"line_start":380,"line_end":380,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050136,"byte_end":9050159,"line_start":396,"line_end":396,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049824,"byte_end":9049870,"line_start":386,"line_end":386,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049871,"byte_end":9049878,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049879,"byte_end":9049902,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049903,"byte_end":9049941,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9049942,"byte_end":9050001,"line_start":390,"line_end":390,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050002,"byte_end":9050034,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050035,"byte_end":9050042,"line_start":392,"line_end":392,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050043,"byte_end":9050054,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050055,"byte_end":9050072,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050771,"byte_end":9050791,"line_start":413,"line_end":413,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050224,"byte_end":9050265,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050266,"byte_end":9050269,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050270,"byte_end":9050328,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050329,"byte_end":9050336,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050337,"byte_end":9050360,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050361,"byte_end":9050445,"line_start":405,"line_end":405,"column_start":1,"column_end":85}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050446,"byte_end":9050537,"line_start":406,"line_end":406,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050538,"byte_end":9050594,"line_start":407,"line_end":407,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050595,"byte_end":9050669,"line_start":408,"line_end":408,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050670,"byte_end":9050677,"line_start":409,"line_end":409,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050678,"byte_end":9050689,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050690,"byte_end":9050707,"line_start":411,"line_end":411,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051337,"byte_end":9051358,"line_start":430,"line_end":430,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050871,"byte_end":9050913,"line_start":417,"line_end":417,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050914,"byte_end":9050917,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050918,"byte_end":9050976,"line_start":419,"line_end":419,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050977,"byte_end":9050984,"line_start":420,"line_end":420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9050985,"byte_end":9051008,"line_start":421,"line_end":421,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051009,"byte_end":9051067,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051068,"byte_end":9051129,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051130,"byte_end":9051187,"line_start":424,"line_end":424,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051188,"byte_end":9051235,"line_start":425,"line_end":425,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051236,"byte_end":9051243,"line_start":426,"line_end":426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051244,"byte_end":9051255,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051256,"byte_end":9051273,"line_start":428,"line_end":428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051849,"byte_end":9051870,"line_start":447,"line_end":447,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051439,"byte_end":9051481,"line_start":434,"line_end":434,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051482,"byte_end":9051485,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051486,"byte_end":9051544,"line_start":436,"line_end":436,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051545,"byte_end":9051552,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051553,"byte_end":9051576,"line_start":438,"line_end":438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051577,"byte_end":9051615,"line_start":439,"line_end":439,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051616,"byte_end":9051654,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051655,"byte_end":9051712,"line_start":441,"line_end":441,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051713,"byte_end":9051747,"line_start":442,"line_end":442,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051748,"byte_end":9051755,"line_start":443,"line_end":443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051756,"byte_end":9051767,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051768,"byte_end":9051785,"line_start":445,"line_end":445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052308,"byte_end":9052325,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051951,"byte_end":9051986,"line_start":451,"line_end":451,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051987,"byte_end":9051990,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9051991,"byte_end":9052007,"line_start":453,"line_end":453,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052008,"byte_end":9052015,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052016,"byte_end":9052039,"line_start":455,"line_end":455,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052040,"byte_end":9052082,"line_start":456,"line_end":456,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052083,"byte_end":9052125,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052126,"byte_end":9052172,"line_start":458,"line_end":458,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052173,"byte_end":9052206,"line_start":459,"line_end":459,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052207,"byte_end":9052214,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052215,"byte_end":9052226,"line_start":461,"line_end":461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052227,"byte_end":9052244,"line_start":462,"line_end":462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052786,"byte_end":9052805,"line_start":481,"line_end":481,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052403,"byte_end":9052448,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052449,"byte_end":9052452,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052453,"byte_end":9052469,"line_start":470,"line_end":470,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052470,"byte_end":9052477,"line_start":471,"line_end":471,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052478,"byte_end":9052501,"line_start":472,"line_end":472,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052502,"byte_end":9052544,"line_start":473,"line_end":473,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052545,"byte_end":9052587,"line_start":474,"line_end":474,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052588,"byte_end":9052636,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052637,"byte_end":9052684,"line_start":476,"line_end":476,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052685,"byte_end":9052692,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052693,"byte_end":9052704,"line_start":478,"line_end":478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052705,"byte_end":9052722,"line_start":479,"line_end":479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053234,"byte_end":9053251,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052883,"byte_end":9052905,"line_start":485,"line_end":485,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052906,"byte_end":9052909,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052910,"byte_end":9052926,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052927,"byte_end":9052934,"line_start":488,"line_end":488,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052935,"byte_end":9052958,"line_start":489,"line_end":489,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9052959,"byte_end":9053001,"line_start":490,"line_end":490,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053002,"byte_end":9053044,"line_start":491,"line_end":491,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053045,"byte_end":9053091,"line_start":492,"line_end":492,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053092,"byte_end":9053132,"line_start":493,"line_end":493,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053133,"byte_end":9053140,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053141,"byte_end":9053152,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053153,"byte_end":9053170,"line_start":496,"line_end":496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053712,"byte_end":9053731,"line_start":515,"line_end":515,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053329,"byte_end":9053374,"line_start":502,"line_end":502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053375,"byte_end":9053378,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053379,"byte_end":9053395,"line_start":504,"line_end":504,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053396,"byte_end":9053403,"line_start":505,"line_end":505,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053404,"byte_end":9053427,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053428,"byte_end":9053470,"line_start":507,"line_end":507,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053471,"byte_end":9053513,"line_start":508,"line_end":508,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053514,"byte_end":9053562,"line_start":509,"line_end":509,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053563,"byte_end":9053610,"line_start":510,"line_end":510,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053611,"byte_end":9053618,"line_start":511,"line_end":511,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053619,"byte_end":9053630,"line_start":512,"line_end":512,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053631,"byte_end":9053648,"line_start":513,"line_end":513,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054361,"byte_end":9054381,"line_start":532,"line_end":532,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053809,"byte_end":9053849,"line_start":519,"line_end":519,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053850,"byte_end":9053853,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053854,"byte_end":9053912,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053913,"byte_end":9053920,"line_start":522,"line_end":522,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053921,"byte_end":9053944,"line_start":523,"line_end":523,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9053945,"byte_end":9054033,"line_start":524,"line_end":524,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054034,"byte_end":9054125,"line_start":525,"line_end":525,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054126,"byte_end":9054182,"line_start":526,"line_end":526,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054183,"byte_end":9054259,"line_start":527,"line_end":527,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054260,"byte_end":9054267,"line_start":528,"line_end":528,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054268,"byte_end":9054279,"line_start":529,"line_end":529,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054280,"byte_end":9054297,"line_start":530,"line_end":530,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054930,"byte_end":9054951,"line_start":549,"line_end":549,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054461,"byte_end":9054502,"line_start":536,"line_end":536,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054503,"byte_end":9054506,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054507,"byte_end":9054565,"line_start":538,"line_end":538,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054566,"byte_end":9054573,"line_start":539,"line_end":539,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054574,"byte_end":9054597,"line_start":540,"line_end":540,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054598,"byte_end":9054657,"line_start":541,"line_end":541,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054658,"byte_end":9054719,"line_start":542,"line_end":542,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054720,"byte_end":9054777,"line_start":543,"line_end":543,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054778,"byte_end":9054828,"line_start":544,"line_end":544,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054829,"byte_end":9054836,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054837,"byte_end":9054848,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9054849,"byte_end":9054866,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055443,"byte_end":9055464,"line_start":566,"line_end":566,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055032,"byte_end":9055073,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055074,"byte_end":9055077,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055078,"byte_end":9055136,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055137,"byte_end":9055144,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055145,"byte_end":9055168,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055169,"byte_end":9055209,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055210,"byte_end":9055248,"line_start":559,"line_end":559,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055249,"byte_end":9055306,"line_start":560,"line_end":560,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055307,"byte_end":9055341,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055342,"byte_end":9055349,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055350,"byte_end":9055361,"line_start":563,"line_end":563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055362,"byte_end":9055379,"line_start":564,"line_end":564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055888,"byte_end":9055905,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055545,"byte_end":9055566,"line_start":570,"line_end":570,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055567,"byte_end":9055570,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055571,"byte_end":9055587,"line_start":572,"line_end":572,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055588,"byte_end":9055595,"line_start":573,"line_end":573,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055596,"byte_end":9055619,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055620,"byte_end":9055662,"line_start":575,"line_end":575,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055663,"byte_end":9055705,"line_start":576,"line_end":576,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055706,"byte_end":9055752,"line_start":577,"line_end":577,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055753,"byte_end":9055786,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055787,"byte_end":9055794,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055795,"byte_end":9055806,"line_start":580,"line_end":580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055807,"byte_end":9055824,"line_start":581,"line_end":581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056365,"byte_end":9056384,"line_start":600,"line_end":600,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9055983,"byte_end":9056027,"line_start":587,"line_end":587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056028,"byte_end":9056031,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056032,"byte_end":9056048,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056049,"byte_end":9056056,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056057,"byte_end":9056080,"line_start":591,"line_end":591,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056081,"byte_end":9056123,"line_start":592,"line_end":592,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056124,"byte_end":9056166,"line_start":593,"line_end":593,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056167,"byte_end":9056215,"line_start":594,"line_end":594,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056216,"byte_end":9056263,"line_start":595,"line_end":595,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056264,"byte_end":9056271,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056272,"byte_end":9056283,"line_start":597,"line_end":597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056284,"byte_end":9056301,"line_start":598,"line_end":598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056813,"byte_end":9056830,"line_start":617,"line_end":617,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056462,"byte_end":9056484,"line_start":604,"line_end":604,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056485,"byte_end":9056488,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056489,"byte_end":9056505,"line_start":606,"line_end":606,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056506,"byte_end":9056513,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056514,"byte_end":9056537,"line_start":608,"line_end":608,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056538,"byte_end":9056580,"line_start":609,"line_end":609,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056581,"byte_end":9056623,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056624,"byte_end":9056670,"line_start":611,"line_end":611,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056671,"byte_end":9056711,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056712,"byte_end":9056719,"line_start":613,"line_end":613,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056720,"byte_end":9056731,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056732,"byte_end":9056749,"line_start":615,"line_end":615,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057291,"byte_end":9057310,"line_start":634,"line_end":634,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056908,"byte_end":9056953,"line_start":621,"line_end":621,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056954,"byte_end":9056957,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056958,"byte_end":9056974,"line_start":623,"line_end":623,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056975,"byte_end":9056982,"line_start":624,"line_end":624,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9056983,"byte_end":9057006,"line_start":625,"line_end":625,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057007,"byte_end":9057049,"line_start":626,"line_end":626,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057050,"byte_end":9057092,"line_start":627,"line_end":627,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057093,"byte_end":9057141,"line_start":628,"line_end":628,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057142,"byte_end":9057189,"line_start":629,"line_end":629,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057190,"byte_end":9057197,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057198,"byte_end":9057209,"line_start":631,"line_end":631,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057210,"byte_end":9057227,"line_start":632,"line_end":632,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057940,"byte_end":9057960,"line_start":651,"line_end":651,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057388,"byte_end":9057428,"line_start":638,"line_end":638,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057429,"byte_end":9057432,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057433,"byte_end":9057491,"line_start":640,"line_end":640,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057492,"byte_end":9057499,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057500,"byte_end":9057523,"line_start":642,"line_end":642,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057524,"byte_end":9057612,"line_start":643,"line_end":643,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057613,"byte_end":9057704,"line_start":644,"line_end":644,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057705,"byte_end":9057761,"line_start":645,"line_end":645,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057762,"byte_end":9057838,"line_start":646,"line_end":646,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057839,"byte_end":9057846,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057847,"byte_end":9057858,"line_start":648,"line_end":648,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9057859,"byte_end":9057876,"line_start":649,"line_end":649,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058505,"byte_end":9058526,"line_start":668,"line_end":668,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058040,"byte_end":9058081,"line_start":655,"line_end":655,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058082,"byte_end":9058085,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058086,"byte_end":9058144,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058145,"byte_end":9058152,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058153,"byte_end":9058176,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058177,"byte_end":9058236,"line_start":660,"line_end":660,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058237,"byte_end":9058298,"line_start":661,"line_end":661,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058299,"byte_end":9058356,"line_start":662,"line_end":662,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058357,"byte_end":9058403,"line_start":663,"line_end":663,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058404,"byte_end":9058411,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058412,"byte_end":9058423,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058424,"byte_end":9058441,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059017,"byte_end":9059038,"line_start":685,"line_end":685,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058607,"byte_end":9058648,"line_start":672,"line_end":672,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058649,"byte_end":9058652,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058653,"byte_end":9058711,"line_start":674,"line_end":674,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058712,"byte_end":9058719,"line_start":675,"line_end":675,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058720,"byte_end":9058743,"line_start":676,"line_end":676,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058744,"byte_end":9058784,"line_start":677,"line_end":677,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058785,"byte_end":9058823,"line_start":678,"line_end":678,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058824,"byte_end":9058881,"line_start":679,"line_end":679,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058882,"byte_end":9058915,"line_start":680,"line_end":680,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058916,"byte_end":9058923,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058924,"byte_end":9058935,"line_start":682,"line_end":682,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9058936,"byte_end":9058953,"line_start":683,"line_end":683,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059462,"byte_end":9059479,"line_start":702,"line_end":702,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059119,"byte_end":9059140,"line_start":689,"line_end":689,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059141,"byte_end":9059144,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059145,"byte_end":9059161,"line_start":691,"line_end":691,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059162,"byte_end":9059169,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059170,"byte_end":9059193,"line_start":693,"line_end":693,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059194,"byte_end":9059236,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059237,"byte_end":9059279,"line_start":695,"line_end":695,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059280,"byte_end":9059326,"line_start":696,"line_end":696,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059327,"byte_end":9059360,"line_start":697,"line_end":697,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059361,"byte_end":9059368,"line_start":698,"line_end":698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059369,"byte_end":9059380,"line_start":699,"line_end":699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059381,"byte_end":9059398,"line_start":700,"line_end":700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059938,"byte_end":9059957,"line_start":719,"line_end":719,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059557,"byte_end":9059600,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059601,"byte_end":9059604,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059605,"byte_end":9059621,"line_start":708,"line_end":708,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059622,"byte_end":9059629,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059630,"byte_end":9059653,"line_start":710,"line_end":710,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059654,"byte_end":9059696,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059697,"byte_end":9059739,"line_start":712,"line_end":712,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059740,"byte_end":9059788,"line_start":713,"line_end":713,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059789,"byte_end":9059836,"line_start":714,"line_end":714,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059837,"byte_end":9059844,"line_start":715,"line_end":715,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059845,"byte_end":9059856,"line_start":716,"line_end":716,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9059857,"byte_end":9059874,"line_start":717,"line_end":717,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060380,"byte_end":9060398,"line_start":736,"line_end":736,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060035,"byte_end":9060057,"line_start":723,"line_end":723,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060058,"byte_end":9060061,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060062,"byte_end":9060078,"line_start":725,"line_end":725,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060079,"byte_end":9060086,"line_start":726,"line_end":726,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060087,"byte_end":9060110,"line_start":727,"line_end":727,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060111,"byte_end":9060153,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060154,"byte_end":9060196,"line_start":729,"line_end":729,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060197,"byte_end":9060244,"line_start":730,"line_end":730,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060245,"byte_end":9060278,"line_start":731,"line_end":731,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060279,"byte_end":9060286,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060287,"byte_end":9060298,"line_start":733,"line_end":733,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060299,"byte_end":9060316,"line_start":734,"line_end":734,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060860,"byte_end":9060880,"line_start":753,"line_end":753,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060477,"byte_end":9060521,"line_start":740,"line_end":740,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060522,"byte_end":9060525,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060526,"byte_end":9060542,"line_start":742,"line_end":742,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060543,"byte_end":9060550,"line_start":743,"line_end":743,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060551,"byte_end":9060574,"line_start":744,"line_end":744,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060575,"byte_end":9060617,"line_start":745,"line_end":745,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060618,"byte_end":9060660,"line_start":746,"line_end":746,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060661,"byte_end":9060710,"line_start":747,"line_end":747,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060711,"byte_end":9060758,"line_start":748,"line_end":748,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060759,"byte_end":9060766,"line_start":749,"line_end":749,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060767,"byte_end":9060778,"line_start":750,"line_end":750,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060779,"byte_end":9060796,"line_start":751,"line_end":751,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061307,"byte_end":9061325,"line_start":770,"line_end":770,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060959,"byte_end":9060984,"line_start":757,"line_end":757,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060985,"byte_end":9060988,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9060989,"byte_end":9061005,"line_start":759,"line_end":759,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061006,"byte_end":9061013,"line_start":760,"line_end":760,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061014,"byte_end":9061037,"line_start":761,"line_end":761,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061038,"byte_end":9061080,"line_start":762,"line_end":762,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061081,"byte_end":9061123,"line_start":763,"line_end":763,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061124,"byte_end":9061171,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061172,"byte_end":9061205,"line_start":765,"line_end":765,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061206,"byte_end":9061213,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061214,"byte_end":9061225,"line_start":767,"line_end":767,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061226,"byte_end":9061243,"line_start":768,"line_end":768,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061783,"byte_end":9061803,"line_start":787,"line_end":787,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061404,"byte_end":9061451,"line_start":774,"line_end":774,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061452,"byte_end":9061455,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061456,"byte_end":9061472,"line_start":776,"line_end":776,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061473,"byte_end":9061480,"line_start":777,"line_end":777,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061481,"byte_end":9061504,"line_start":778,"line_end":778,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061505,"byte_end":9061547,"line_start":779,"line_end":779,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061548,"byte_end":9061590,"line_start":780,"line_end":780,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061591,"byte_end":9061640,"line_start":781,"line_end":781,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061641,"byte_end":9061681,"line_start":782,"line_end":782,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061682,"byte_end":9061689,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061690,"byte_end":9061701,"line_start":784,"line_end":784,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061702,"byte_end":9061719,"line_start":785,"line_end":785,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062229,"byte_end":9062247,"line_start":804,"line_end":804,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061882,"byte_end":9061906,"line_start":791,"line_end":791,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061907,"byte_end":9061910,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061911,"byte_end":9061927,"line_start":793,"line_end":793,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061928,"byte_end":9061935,"line_start":794,"line_end":794,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061936,"byte_end":9061959,"line_start":795,"line_end":795,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9061960,"byte_end":9062002,"line_start":796,"line_end":796,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062003,"byte_end":9062045,"line_start":797,"line_end":797,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062046,"byte_end":9062093,"line_start":798,"line_end":798,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062094,"byte_end":9062127,"line_start":799,"line_end":799,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062128,"byte_end":9062135,"line_start":800,"line_end":800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062136,"byte_end":9062147,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062148,"byte_end":9062165,"line_start":802,"line_end":802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062704,"byte_end":9062724,"line_start":821,"line_end":821,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062326,"byte_end":9062372,"line_start":808,"line_end":808,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062373,"byte_end":9062376,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062377,"byte_end":9062393,"line_start":810,"line_end":810,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062394,"byte_end":9062401,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062402,"byte_end":9062425,"line_start":812,"line_end":812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062426,"byte_end":9062468,"line_start":813,"line_end":813,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062469,"byte_end":9062511,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062512,"byte_end":9062561,"line_start":815,"line_end":815,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062562,"byte_end":9062602,"line_start":816,"line_end":816,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062603,"byte_end":9062610,"line_start":817,"line_end":817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062611,"byte_end":9062622,"line_start":818,"line_end":818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062623,"byte_end":9062640,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063151,"byte_end":9063169,"line_start":838,"line_end":838,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062803,"byte_end":9062828,"line_start":825,"line_end":825,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062829,"byte_end":9062832,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062833,"byte_end":9062849,"line_start":827,"line_end":827,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062850,"byte_end":9062857,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062858,"byte_end":9062881,"line_start":829,"line_end":829,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062882,"byte_end":9062924,"line_start":830,"line_end":830,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062925,"byte_end":9062967,"line_start":831,"line_end":831,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9062968,"byte_end":9063015,"line_start":832,"line_end":832,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063016,"byte_end":9063049,"line_start":833,"line_end":833,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063050,"byte_end":9063057,"line_start":834,"line_end":834,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063058,"byte_end":9063069,"line_start":835,"line_end":835,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063070,"byte_end":9063087,"line_start":836,"line_end":836,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063634,"byte_end":9063654,"line_start":855,"line_end":855,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063248,"byte_end":9063295,"line_start":842,"line_end":842,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063296,"byte_end":9063299,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063300,"byte_end":9063316,"line_start":844,"line_end":844,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063317,"byte_end":9063324,"line_start":845,"line_end":845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063325,"byte_end":9063348,"line_start":846,"line_end":846,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063349,"byte_end":9063391,"line_start":847,"line_end":847,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063392,"byte_end":9063434,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063435,"byte_end":9063484,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063485,"byte_end":9063532,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063533,"byte_end":9063540,"line_start":851,"line_end":851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063541,"byte_end":9063552,"line_start":852,"line_end":852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063553,"byte_end":9063570,"line_start":853,"line_end":853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064080,"byte_end":9064098,"line_start":872,"line_end":872,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063733,"byte_end":9063757,"line_start":859,"line_end":859,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063758,"byte_end":9063761,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063762,"byte_end":9063778,"line_start":861,"line_end":861,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063779,"byte_end":9063786,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063787,"byte_end":9063810,"line_start":863,"line_end":863,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063811,"byte_end":9063853,"line_start":864,"line_end":864,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063854,"byte_end":9063896,"line_start":865,"line_end":865,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063897,"byte_end":9063944,"line_start":866,"line_end":866,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063945,"byte_end":9063978,"line_start":867,"line_end":867,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063979,"byte_end":9063986,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063987,"byte_end":9063998,"line_start":869,"line_end":869,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9063999,"byte_end":9064016,"line_start":870,"line_end":870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064562,"byte_end":9064582,"line_start":889,"line_end":889,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064177,"byte_end":9064223,"line_start":876,"line_end":876,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064224,"byte_end":9064227,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064228,"byte_end":9064244,"line_start":878,"line_end":878,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064245,"byte_end":9064252,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064253,"byte_end":9064276,"line_start":880,"line_end":880,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064277,"byte_end":9064319,"line_start":881,"line_end":881,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064320,"byte_end":9064362,"line_start":882,"line_end":882,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064363,"byte_end":9064412,"line_start":883,"line_end":883,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064413,"byte_end":9064460,"line_start":884,"line_end":884,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064461,"byte_end":9064468,"line_start":885,"line_end":885,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064469,"byte_end":9064480,"line_start":886,"line_end":886,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064481,"byte_end":9064498,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065038,"byte_end":9065060,"line_start":906,"line_end":906,"column_start":8,"column_end":30},"name":"cmp_ordered_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d","value":"pub fn cmp_ordered_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064661,"byte_end":9064706,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064707,"byte_end":9064710,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064711,"byte_end":9064727,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064728,"byte_end":9064735,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064736,"byte_end":9064759,"line_start":897,"line_end":897,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064760,"byte_end":9064807,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064808,"byte_end":9064850,"line_start":899,"line_end":899,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064851,"byte_end":9064902,"line_start":900,"line_end":900,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064903,"byte_end":9064936,"line_start":901,"line_end":901,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064937,"byte_end":9064944,"line_start":902,"line_end":902,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064945,"byte_end":9064956,"line_start":903,"line_end":903,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9064957,"byte_end":9064974,"line_start":904,"line_end":904,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065549,"byte_end":9065573,"line_start":923,"line_end":923,"column_start":8,"column_end":32},"name":"cmp_ordered_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d_s","value":"pub fn cmp_ordered_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065139,"byte_end":9065206,"line_start":910,"line_end":910,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065207,"byte_end":9065210,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065211,"byte_end":9065227,"line_start":912,"line_end":912,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065228,"byte_end":9065235,"line_start":913,"line_end":913,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065236,"byte_end":9065259,"line_start":914,"line_end":914,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065260,"byte_end":9065302,"line_start":915,"line_end":915,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065303,"byte_end":9065345,"line_start":916,"line_end":916,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065346,"byte_end":9065399,"line_start":917,"line_end":917,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065400,"byte_end":9065447,"line_start":918,"line_end":918,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065448,"byte_end":9065455,"line_start":919,"line_end":919,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065456,"byte_end":9065467,"line_start":920,"line_end":920,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065468,"byte_end":9065485,"line_start":921,"line_end":921,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066021,"byte_end":9066041,"line_start":940,"line_end":940,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065652,"byte_end":9065691,"line_start":927,"line_end":927,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065692,"byte_end":9065695,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065696,"byte_end":9065712,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065713,"byte_end":9065720,"line_start":930,"line_end":930,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065721,"byte_end":9065744,"line_start":931,"line_end":931,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065745,"byte_end":9065792,"line_start":932,"line_end":932,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065793,"byte_end":9065835,"line_start":933,"line_end":933,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065836,"byte_end":9065885,"line_start":934,"line_end":934,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065886,"byte_end":9065919,"line_start":935,"line_end":935,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065920,"byte_end":9065927,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065928,"byte_end":9065939,"line_start":937,"line_end":937,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9065940,"byte_end":9065957,"line_start":938,"line_end":938,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066529,"byte_end":9066551,"line_start":957,"line_end":957,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066122,"byte_end":9066183,"line_start":944,"line_end":944,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066184,"byte_end":9066187,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066188,"byte_end":9066204,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066205,"byte_end":9066212,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066213,"byte_end":9066236,"line_start":948,"line_end":948,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066237,"byte_end":9066284,"line_start":949,"line_end":949,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066285,"byte_end":9066327,"line_start":950,"line_end":950,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066328,"byte_end":9066379,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066380,"byte_end":9066427,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066428,"byte_end":9066435,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066436,"byte_end":9066447,"line_start":954,"line_end":954,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066448,"byte_end":9066465,"line_start":955,"line_end":955,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066951,"byte_end":9066969,"line_start":973,"line_end":973,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066632,"byte_end":9066660,"line_start":961,"line_end":961,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066661,"byte_end":9066664,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066665,"byte_end":9066682,"line_start":963,"line_end":963,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066683,"byte_end":9066690,"line_start":964,"line_end":964,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066691,"byte_end":9066714,"line_start":965,"line_end":965,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066715,"byte_end":9066757,"line_start":966,"line_end":966,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066758,"byte_end":9066800,"line_start":967,"line_end":967,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066801,"byte_end":9066849,"line_start":968,"line_end":968,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066850,"byte_end":9066857,"line_start":969,"line_end":969,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066858,"byte_end":9066869,"line_start":970,"line_end":970,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9066870,"byte_end":9066887,"line_start":971,"line_end":971,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067374,"byte_end":9067392,"line_start":989,"line_end":989,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067039,"byte_end":9067083,"line_start":977,"line_end":977,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067084,"byte_end":9067087,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067088,"byte_end":9067105,"line_start":979,"line_end":979,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067106,"byte_end":9067113,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067114,"byte_end":9067137,"line_start":981,"line_end":981,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067138,"byte_end":9067180,"line_start":982,"line_end":982,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067181,"byte_end":9067223,"line_start":983,"line_end":983,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067224,"byte_end":9067272,"line_start":984,"line_end":984,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067273,"byte_end":9067280,"line_start":985,"line_end":985,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067281,"byte_end":9067292,"line_start":986,"line_end":986,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067293,"byte_end":9067310,"line_start":987,"line_end":987,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067785,"byte_end":9067803,"line_start":1005,"line_end":1005,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067462,"byte_end":9067494,"line_start":993,"line_end":993,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067495,"byte_end":9067498,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067499,"byte_end":9067516,"line_start":995,"line_end":995,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067517,"byte_end":9067524,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067525,"byte_end":9067548,"line_start":997,"line_end":997,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067549,"byte_end":9067591,"line_start":998,"line_end":998,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067592,"byte_end":9067634,"line_start":999,"line_end":999,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067635,"byte_end":9067683,"line_start":1000,"line_end":1000,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067684,"byte_end":9067691,"line_start":1001,"line_end":1001,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067692,"byte_end":9067703,"line_start":1002,"line_end":1002,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067704,"byte_end":9067721,"line_start":1003,"line_end":1003,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068205,"byte_end":9068223,"line_start":1021,"line_end":1021,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067873,"byte_end":9067914,"line_start":1009,"line_end":1009,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067915,"byte_end":9067918,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067919,"byte_end":9067936,"line_start":1011,"line_end":1011,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067937,"byte_end":9067944,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067945,"byte_end":9067968,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9067969,"byte_end":9068011,"line_start":1014,"line_end":1014,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068012,"byte_end":9068054,"line_start":1015,"line_end":1015,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068055,"byte_end":9068103,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068104,"byte_end":9068111,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068112,"byte_end":9068123,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068124,"byte_end":9068141,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068613,"byte_end":9068631,"line_start":1037,"line_end":1037,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068293,"byte_end":9068322,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068323,"byte_end":9068326,"line_start":1026,"line_end":1026,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068327,"byte_end":9068344,"line_start":1027,"line_end":1027,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068345,"byte_end":9068352,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068353,"byte_end":9068376,"line_start":1029,"line_end":1029,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068377,"byte_end":9068419,"line_start":1030,"line_end":1030,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068420,"byte_end":9068462,"line_start":1031,"line_end":1031,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068463,"byte_end":9068511,"line_start":1032,"line_end":1032,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068512,"byte_end":9068519,"line_start":1033,"line_end":1033,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068520,"byte_end":9068531,"line_start":1034,"line_end":1034,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068532,"byte_end":9068549,"line_start":1035,"line_end":1035,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069022,"byte_end":9069041,"line_start":1053,"line_end":1053,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068701,"byte_end":9068730,"line_start":1041,"line_end":1041,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068731,"byte_end":9068734,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068735,"byte_end":9068752,"line_start":1043,"line_end":1043,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068753,"byte_end":9068760,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068761,"byte_end":9068784,"line_start":1045,"line_end":1045,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068785,"byte_end":9068827,"line_start":1046,"line_end":1046,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068828,"byte_end":9068870,"line_start":1047,"line_end":1047,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068871,"byte_end":9068920,"line_start":1048,"line_end":1048,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068921,"byte_end":9068928,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068929,"byte_end":9068940,"line_start":1050,"line_end":1050,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9068941,"byte_end":9068958,"line_start":1051,"line_end":1051,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069562,"byte_end":9069600,"line_start":1070,"line_end":1070,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069112,"byte_end":9069168,"line_start":1057,"line_end":1057,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069169,"byte_end":9069176,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069177,"byte_end":9069200,"line_start":1059,"line_end":1059,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069201,"byte_end":9069239,"line_start":1060,"line_end":1060,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069240,"byte_end":9069294,"line_start":1061,"line_end":1061,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069295,"byte_end":9069337,"line_start":1062,"line_end":1062,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069338,"byte_end":9069379,"line_start":1063,"line_end":1063,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069380,"byte_end":9069387,"line_start":1064,"line_end":1064,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069388,"byte_end":9069428,"line_start":1065,"line_end":1065,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069429,"byte_end":9069468,"line_start":1066,"line_end":1066,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069469,"byte_end":9069480,"line_start":1067,"line_end":1067,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069481,"byte_end":9069498,"line_start":1068,"line_end":1068,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070113,"byte_end":9070143,"line_start":1087,"line_end":1087,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069666,"byte_end":9069718,"line_start":1074,"line_end":1074,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069719,"byte_end":9069726,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069727,"byte_end":9069750,"line_start":1076,"line_end":1076,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069751,"byte_end":9069789,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069790,"byte_end":9069836,"line_start":1078,"line_end":1078,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069837,"byte_end":9069888,"line_start":1079,"line_end":1079,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069889,"byte_end":9069930,"line_start":1080,"line_end":1080,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069931,"byte_end":9069938,"line_start":1081,"line_end":1081,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069939,"byte_end":9069979,"line_start":1082,"line_end":1082,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9069980,"byte_end":9070019,"line_start":1083,"line_end":1083,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070020,"byte_end":9070031,"line_start":1084,"line_end":1084,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070032,"byte_end":9070049,"line_start":1085,"line_end":1085,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070636,"byte_end":9070667,"line_start":1104,"line_end":1104,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070207,"byte_end":9070265,"line_start":1091,"line_end":1091,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070266,"byte_end":9070273,"line_start":1092,"line_end":1092,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070274,"byte_end":9070297,"line_start":1093,"line_end":1093,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070298,"byte_end":9070340,"line_start":1094,"line_end":1094,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070341,"byte_end":9070388,"line_start":1095,"line_end":1095,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070389,"byte_end":9070420,"line_start":1096,"line_end":1096,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070421,"byte_end":9070453,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070454,"byte_end":9070461,"line_start":1098,"line_end":1098,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070462,"byte_end":9070502,"line_start":1099,"line_end":1099,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070503,"byte_end":9070542,"line_start":1100,"line_end":1100,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070543,"byte_end":9070554,"line_start":1101,"line_end":1101,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070555,"byte_end":9070572,"line_start":1102,"line_end":1102,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071162,"byte_end":9071188,"line_start":1120,"line_end":1120,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070733,"byte_end":9070791,"line_start":1108,"line_end":1108,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070792,"byte_end":9070799,"line_start":1109,"line_end":1109,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070800,"byte_end":9070823,"line_start":1110,"line_end":1110,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070824,"byte_end":9070866,"line_start":1111,"line_end":1111,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070867,"byte_end":9070909,"line_start":1112,"line_end":1112,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070910,"byte_end":9070982,"line_start":1113,"line_end":1113,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070983,"byte_end":9070990,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9070991,"byte_end":9071028,"line_start":1115,"line_end":1115,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071029,"byte_end":9071068,"line_start":1116,"line_end":1116,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071069,"byte_end":9071080,"line_start":1117,"line_end":1117,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071081,"byte_end":9071098,"line_start":1118,"line_end":1118,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071670,"byte_end":9071700,"line_start":1137,"line_end":1137,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071249,"byte_end":9071291,"line_start":1124,"line_end":1124,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071292,"byte_end":9071299,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071300,"byte_end":9071323,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071324,"byte_end":9071375,"line_start":1127,"line_end":1127,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071376,"byte_end":9071422,"line_start":1128,"line_end":1128,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071423,"byte_end":9071454,"line_start":1129,"line_end":1129,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071455,"byte_end":9071487,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071488,"byte_end":9071495,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071496,"byte_end":9071536,"line_start":1132,"line_end":1132,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071537,"byte_end":9071576,"line_start":1133,"line_end":1133,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071577,"byte_end":9071588,"line_start":1134,"line_end":1134,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071589,"byte_end":9071606,"line_start":1135,"line_end":1135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072204,"byte_end":9072237,"line_start":1153,"line_end":1153,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071765,"byte_end":9071823,"line_start":1141,"line_end":1141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071824,"byte_end":9071831,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071832,"byte_end":9071855,"line_start":1143,"line_end":1143,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071856,"byte_end":9071907,"line_start":1144,"line_end":1144,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071908,"byte_end":9071957,"line_start":1145,"line_end":1145,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9071958,"byte_end":9072024,"line_start":1146,"line_end":1146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072025,"byte_end":9072032,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072033,"byte_end":9072070,"line_start":1148,"line_end":1148,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072071,"byte_end":9072110,"line_start":1149,"line_end":1149,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072111,"byte_end":9072122,"line_start":1150,"line_end":1150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072123,"byte_end":9072140,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072583,"byte_end":9072603,"line_start":1167,"line_end":1167,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072299,"byte_end":9072341,"line_start":1157,"line_end":1157,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072342,"byte_end":9072349,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072350,"byte_end":9072373,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072374,"byte_end":9072416,"line_start":1160,"line_end":1160,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072417,"byte_end":9072453,"line_start":1161,"line_end":1161,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072454,"byte_end":9072481,"line_start":1162,"line_end":1162,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072482,"byte_end":9072489,"line_start":1163,"line_end":1163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072490,"byte_end":9072501,"line_start":1164,"line_end":1164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072502,"byte_end":9072519,"line_start":1165,"line_end":1165,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072944,"byte_end":9072964,"line_start":1181,"line_end":1181,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072658,"byte_end":9072704,"line_start":1171,"line_end":1171,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072705,"byte_end":9072712,"line_start":1172,"line_end":1172,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072713,"byte_end":9072736,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072737,"byte_end":9072779,"line_start":1174,"line_end":1174,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072780,"byte_end":9072816,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072817,"byte_end":9072842,"line_start":1176,"line_end":1176,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072843,"byte_end":9072850,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072851,"byte_end":9072862,"line_start":1178,"line_end":1178,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9072863,"byte_end":9072880,"line_start":1179,"line_end":1179,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073337,"byte_end":9073357,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073020,"byte_end":9073066,"line_start":1185,"line_end":1185,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073067,"byte_end":9073074,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073075,"byte_end":9073098,"line_start":1187,"line_end":1187,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073099,"byte_end":9073141,"line_start":1188,"line_end":1188,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073142,"byte_end":9073178,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073179,"byte_end":9073204,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073205,"byte_end":9073212,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073213,"byte_end":9073224,"line_start":1192,"line_end":1192,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073225,"byte_end":9073242,"line_start":1193,"line_end":1193,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073243,"byte_end":9073273,"line_start":1194,"line_end":1194,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073928,"byte_end":9073958,"line_start":1214,"line_end":1214,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073413,"byte_end":9073488,"line_start":1200,"line_end":1200,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073489,"byte_end":9073496,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073497,"byte_end":9073520,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073521,"byte_end":9073572,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073573,"byte_end":9073615,"line_start":1204,"line_end":1204,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073616,"byte_end":9073665,"line_start":1205,"line_end":1205,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073666,"byte_end":9073717,"line_start":1206,"line_end":1206,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073718,"byte_end":9073725,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073726,"byte_end":9073763,"line_start":1208,"line_end":1208,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073764,"byte_end":9073803,"line_start":1209,"line_end":1209,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073804,"byte_end":9073815,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073816,"byte_end":9073833,"line_start":1211,"line_end":1211,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9073834,"byte_end":9073864,"line_start":1212,"line_end":1212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074315,"byte_end":9074335,"line_start":1228,"line_end":1228,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074033,"byte_end":9074079,"line_start":1218,"line_end":1218,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074080,"byte_end":9074087,"line_start":1219,"line_end":1219,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074088,"byte_end":9074111,"line_start":1220,"line_end":1220,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074112,"byte_end":9074150,"line_start":1221,"line_end":1221,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074151,"byte_end":9074187,"line_start":1222,"line_end":1222,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074188,"byte_end":9074213,"line_start":1223,"line_end":1223,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074214,"byte_end":9074221,"line_start":1224,"line_end":1224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074222,"byte_end":9074233,"line_start":1225,"line_end":1225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074234,"byte_end":9074251,"line_start":1226,"line_end":1226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074705,"byte_end":9074725,"line_start":1243,"line_end":1243,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074394,"byte_end":9074440,"line_start":1232,"line_end":1232,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074441,"byte_end":9074448,"line_start":1233,"line_end":1233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074449,"byte_end":9074472,"line_start":1234,"line_end":1234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074473,"byte_end":9074509,"line_start":1235,"line_end":1235,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074510,"byte_end":9074546,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074547,"byte_end":9074572,"line_start":1237,"line_end":1237,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074573,"byte_end":9074580,"line_start":1238,"line_end":1238,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074581,"byte_end":9074592,"line_start":1239,"line_end":1239,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074593,"byte_end":9074610,"line_start":1240,"line_end":1240,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074611,"byte_end":9074641,"line_start":1241,"line_end":1241,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075199,"byte_end":9075226,"line_start":1259,"line_end":1259,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074784,"byte_end":9074849,"line_start":1247,"line_end":1247,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074850,"byte_end":9074857,"line_start":1248,"line_end":1248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074858,"byte_end":9074881,"line_start":1249,"line_end":1249,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074882,"byte_end":9074924,"line_start":1250,"line_end":1250,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074925,"byte_end":9074975,"line_start":1251,"line_end":1251,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9074976,"byte_end":9075017,"line_start":1252,"line_end":1252,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075018,"byte_end":9075025,"line_start":1253,"line_end":1253,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075026,"byte_end":9075065,"line_start":1254,"line_end":1254,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075066,"byte_end":9075105,"line_start":1255,"line_end":1255,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075106,"byte_end":9075117,"line_start":1256,"line_end":1256,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075118,"byte_end":9075135,"line_start":1257,"line_end":1257,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075640,"byte_end":9075655,"line_start":1273,"line_end":1273,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075302,"byte_end":9075375,"line_start":1263,"line_end":1263,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075376,"byte_end":9075383,"line_start":1264,"line_end":1264,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075384,"byte_end":9075407,"line_start":1265,"line_end":1265,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075408,"byte_end":9075460,"line_start":1266,"line_end":1266,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075461,"byte_end":9075516,"line_start":1267,"line_end":1267,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075517,"byte_end":9075538,"line_start":1268,"line_end":1268,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075539,"byte_end":9075546,"line_start":1269,"line_end":1269,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075547,"byte_end":9075558,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075559,"byte_end":9075576,"line_start":1271,"line_end":1271,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076165,"byte_end":9076192,"line_start":1290,"line_end":1290,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075719,"byte_end":9075784,"line_start":1277,"line_end":1277,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075785,"byte_end":9075792,"line_start":1278,"line_end":1278,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075793,"byte_end":9075816,"line_start":1279,"line_end":1279,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075817,"byte_end":9075859,"line_start":1280,"line_end":1280,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075860,"byte_end":9075910,"line_start":1281,"line_end":1281,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075911,"byte_end":9075952,"line_start":1282,"line_end":1282,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075953,"byte_end":9075960,"line_start":1283,"line_end":1283,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9075961,"byte_end":9076000,"line_start":1284,"line_end":1284,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076001,"byte_end":9076040,"line_start":1285,"line_end":1285,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076041,"byte_end":9076052,"line_start":1286,"line_end":1286,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076053,"byte_end":9076070,"line_start":1287,"line_end":1287,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076071,"byte_end":9076101,"line_start":1288,"line_end":1288,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076635,"byte_end":9076650,"line_start":1305,"line_end":1305,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076268,"byte_end":9076341,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076342,"byte_end":9076349,"line_start":1295,"line_end":1295,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076350,"byte_end":9076373,"line_start":1296,"line_end":1296,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076374,"byte_end":9076426,"line_start":1297,"line_end":1297,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076427,"byte_end":9076480,"line_start":1298,"line_end":1298,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076481,"byte_end":9076502,"line_start":1299,"line_end":1299,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076503,"byte_end":9076510,"line_start":1300,"line_end":1300,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076511,"byte_end":9076522,"line_start":1301,"line_end":1301,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076523,"byte_end":9076540,"line_start":1302,"line_end":1302,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076541,"byte_end":9076571,"line_start":1303,"line_end":1303,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077188,"byte_end":9077218,"line_start":1322,"line_end":1322,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076714,"byte_end":9076789,"line_start":1309,"line_end":1309,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076790,"byte_end":9076797,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076798,"byte_end":9076821,"line_start":1311,"line_end":1311,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076822,"byte_end":9076864,"line_start":1312,"line_end":1312,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076865,"byte_end":9076916,"line_start":1313,"line_end":1313,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076917,"byte_end":9076966,"line_start":1314,"line_end":1314,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9076967,"byte_end":9077008,"line_start":1315,"line_end":1315,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077009,"byte_end":9077016,"line_start":1316,"line_end":1316,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077017,"byte_end":9077054,"line_start":1317,"line_end":1317,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077055,"byte_end":9077094,"line_start":1318,"line_end":1318,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077095,"byte_end":9077106,"line_start":1319,"line_end":1319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077107,"byte_end":9077124,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077639,"byte_end":9077662,"line_start":1336,"line_end":1336,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077295,"byte_end":9077371,"line_start":1326,"line_end":1326,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077372,"byte_end":9077379,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077380,"byte_end":9077403,"line_start":1328,"line_end":1328,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077404,"byte_end":9077446,"line_start":1329,"line_end":1329,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077447,"byte_end":9077486,"line_start":1330,"line_end":1330,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077487,"byte_end":9077537,"line_start":1331,"line_end":1331,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077538,"byte_end":9077545,"line_start":1332,"line_end":1332,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077546,"byte_end":9077557,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077558,"byte_end":9077575,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078049,"byte_end":9078071,"line_start":1350,"line_end":1350,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077729,"byte_end":9077773,"line_start":1340,"line_end":1340,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077774,"byte_end":9077781,"line_start":1341,"line_end":1341,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077782,"byte_end":9077805,"line_start":1342,"line_end":1342,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077806,"byte_end":9077857,"line_start":1343,"line_end":1343,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077858,"byte_end":9077896,"line_start":1344,"line_end":1344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077897,"byte_end":9077947,"line_start":1345,"line_end":1345,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077948,"byte_end":9077955,"line_start":1346,"line_end":1346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077956,"byte_end":9077967,"line_start":1347,"line_end":1347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9077968,"byte_end":9077985,"line_start":1348,"line_end":1348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078407,"byte_end":9078430,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078137,"byte_end":9078179,"line_start":1354,"line_end":1354,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078180,"byte_end":9078187,"line_start":1355,"line_end":1355,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078188,"byte_end":9078211,"line_start":1356,"line_end":1356,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078212,"byte_end":9078254,"line_start":1357,"line_end":1357,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078255,"byte_end":9078305,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078306,"byte_end":9078313,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078314,"byte_end":9078325,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078326,"byte_end":9078343,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078788,"byte_end":9078811,"line_start":1377,"line_end":1377,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078487,"byte_end":9078529,"line_start":1367,"line_end":1367,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078530,"byte_end":9078537,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078538,"byte_end":9078561,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078562,"byte_end":9078604,"line_start":1370,"line_end":1370,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078605,"byte_end":9078655,"line_start":1371,"line_end":1371,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078656,"byte_end":9078663,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078664,"byte_end":9078675,"line_start":1373,"line_end":1373,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078676,"byte_end":9078693,"line_start":1374,"line_end":1374,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078694,"byte_end":9078724,"line_start":1375,"line_end":1375,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079187,"byte_end":9079196,"line_start":1392,"line_end":1392,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078868,"byte_end":9078889,"line_start":1381,"line_end":1381,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078890,"byte_end":9078897,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078898,"byte_end":9078921,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078922,"byte_end":9078966,"line_start":1384,"line_end":1384,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9078967,"byte_end":9079012,"line_start":1385,"line_end":1385,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079013,"byte_end":9079052,"line_start":1386,"line_end":1386,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079053,"byte_end":9079085,"line_start":1387,"line_end":1387,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079086,"byte_end":9079093,"line_start":1388,"line_end":1388,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079094,"byte_end":9079105,"line_start":1389,"line_end":1389,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079106,"byte_end":9079123,"line_start":1390,"line_end":1390,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079619,"byte_end":9079630,"line_start":1407,"line_end":1407,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079272,"byte_end":9079317,"line_start":1396,"line_end":1396,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079318,"byte_end":9079325,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079326,"byte_end":9079349,"line_start":1398,"line_end":1398,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079350,"byte_end":9079394,"line_start":1399,"line_end":1399,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079395,"byte_end":9079442,"line_start":1400,"line_end":1400,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079443,"byte_end":9079484,"line_start":1401,"line_end":1401,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079485,"byte_end":9079517,"line_start":1402,"line_end":1402,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079518,"byte_end":9079525,"line_start":1403,"line_end":1403,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079526,"byte_end":9079537,"line_start":1404,"line_end":1404,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079538,"byte_end":9079555,"line_start":1405,"line_end":1405,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080138,"byte_end":9080162,"line_start":1425,"line_end":1425,"column_start":8,"column_end":32},"name":"extract_i16_as_i32_m128i","qualname":"::x86_x64::sse2::extract_i16_as_i32_m128i","value":"pub fn extract_i16_as_i32_m128i<const LANE: i32>(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets an `i16` value out of an `m128i`, returns as `i32`.","sig":null,"attributes":[{"value":"/ Gets an `i16` value out of an `m128i`, returns as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079706,"byte_end":9079766,"line_start":1411,"line_end":1411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079767,"byte_end":9079770,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079771,"byte_end":9079820,"line_start":1413,"line_end":1413,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079821,"byte_end":9079824,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079825,"byte_end":9079832,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079833,"byte_end":9079856,"line_start":1416,"line_end":1416,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079857,"byte_end":9079919,"line_start":1417,"line_end":1417,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079920,"byte_end":9079926,"line_start":1418,"line_end":1418,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<0>(a), 0xA);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079927,"byte_end":9079981,"line_start":1419,"line_end":1419,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<1>(a), 0xB);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9079982,"byte_end":9080036,"line_start":1420,"line_end":1420,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080037,"byte_end":9080044,"line_start":1421,"line_end":1421,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080045,"byte_end":9080056,"line_start":1422,"line_end":1422,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080057,"byte_end":9080074,"line_start":1423,"line_end":1423,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080689,"byte_end":9080714,"line_start":1443,"line_end":1443,"column_start":8,"column_end":33},"name":"insert_i16_from_i32_m128i","qualname":"::x86_x64::sse2::insert_i16_from_i32_m128i","value":"pub fn insert_i16_from_i32_m128i<const LANE: i32>(m128i, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the low 16 bits of an `i32` value into an `m128i`.","sig":null,"attributes":[{"value":"/ Inserts the low 16 bits of an `i32` value into an `m128i`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080244,"byte_end":9080306,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080307,"byte_end":9080310,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080311,"byte_end":9080360,"line_start":1431,"line_end":1431,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080361,"byte_end":9080364,"line_start":1432,"line_end":1432,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080365,"byte_end":9080372,"line_start":1433,"line_end":1433,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080373,"byte_end":9080396,"line_start":1434,"line_end":1434,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080397,"byte_end":9080459,"line_start":1435,"line_end":1435,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080460,"byte_end":9080466,"line_start":1436,"line_end":1436,"column_start":1,"column_end":7}},{"value":"/ let b = insert_i16_from_i32_m128i::<0>(a, -1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080467,"byte_end":9080517,"line_start":1437,"line_end":1437,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(<[i16; 8]>::from(b), [-1, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080518,"byte_end":9080587,"line_start":1438,"line_end":1438,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080588,"byte_end":9080595,"line_start":1439,"line_end":1439,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080596,"byte_end":9080607,"line_start":1440,"line_end":1440,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080608,"byte_end":9080625,"line_start":1441,"line_end":1441,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081104,"byte_end":9081114,"line_start":1457,"line_end":1457,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080815,"byte_end":9080855,"line_start":1447,"line_end":1447,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080856,"byte_end":9080863,"line_start":1448,"line_end":1448,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080864,"byte_end":9080887,"line_start":1449,"line_end":1449,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080888,"byte_end":9080932,"line_start":1450,"line_end":1450,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080933,"byte_end":9080960,"line_start":1451,"line_end":1451,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9080961,"byte_end":9081002,"line_start":1452,"line_end":1452,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081003,"byte_end":9081010,"line_start":1453,"line_end":1453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081011,"byte_end":9081022,"line_start":1454,"line_end":1454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081023,"byte_end":9081040,"line_start":1455,"line_end":1455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081568,"byte_end":9081588,"line_start":1472,"line_end":1472,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081205,"byte_end":9081264,"line_start":1461,"line_end":1461,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081265,"byte_end":9081272,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081273,"byte_end":9081296,"line_start":1463,"line_end":1463,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081297,"byte_end":9081313,"line_start":1464,"line_end":1464,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081314,"byte_end":9081351,"line_start":1465,"line_end":1465,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081352,"byte_end":9081421,"line_start":1466,"line_end":1466,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081422,"byte_end":9081429,"line_start":1467,"line_end":1467,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081430,"byte_end":9081441,"line_start":1468,"line_end":1468,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081442,"byte_end":9081459,"line_start":1469,"line_end":1469,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081460,"byte_end":9081504,"line_start":1470,"line_end":1470,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082006,"byte_end":9082022,"line_start":1487,"line_end":1487,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081648,"byte_end":9081706,"line_start":1476,"line_end":1476,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081707,"byte_end":9081714,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081715,"byte_end":9081738,"line_start":1478,"line_end":1478,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081739,"byte_end":9081755,"line_start":1479,"line_end":1479,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081756,"byte_end":9081789,"line_start":1480,"line_end":1480,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081790,"byte_end":9081859,"line_start":1481,"line_end":1481,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081860,"byte_end":9081867,"line_start":1482,"line_end":1482,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081868,"byte_end":9081879,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081880,"byte_end":9081897,"line_start":1484,"line_end":1484,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9081898,"byte_end":9081942,"line_start":1485,"line_end":1485,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082380,"byte_end":9082390,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082081,"byte_end":9082121,"line_start":1491,"line_end":1491,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082122,"byte_end":9082129,"line_start":1492,"line_end":1492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082130,"byte_end":9082153,"line_start":1493,"line_end":1493,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082154,"byte_end":9082192,"line_start":1494,"line_end":1494,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082193,"byte_end":9082220,"line_start":1495,"line_end":1495,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082221,"byte_end":9082278,"line_start":1496,"line_end":1496,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082279,"byte_end":9082286,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082287,"byte_end":9082298,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082299,"byte_end":9082316,"line_start":1499,"line_end":1499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082837,"byte_end":9082860,"line_start":1516,"line_end":1516,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082488,"byte_end":9082553,"line_start":1505,"line_end":1505,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082554,"byte_end":9082561,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082562,"byte_end":9082585,"line_start":1507,"line_end":1507,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082586,"byte_end":9082622,"line_start":1508,"line_end":1508,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082623,"byte_end":9082644,"line_start":1509,"line_end":1509,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082645,"byte_end":9082693,"line_start":1510,"line_end":1510,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082694,"byte_end":9082735,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082736,"byte_end":9082743,"line_start":1512,"line_end":1512,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082744,"byte_end":9082755,"line_start":1513,"line_end":1513,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082756,"byte_end":9082773,"line_start":1514,"line_end":1514,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083229,"byte_end":9083245,"line_start":1530,"line_end":1530,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082935,"byte_end":9082975,"line_start":1520,"line_end":1520,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082976,"byte_end":9082983,"line_start":1521,"line_end":1521,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9082984,"byte_end":9083007,"line_start":1522,"line_end":1522,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083008,"byte_end":9083044,"line_start":1523,"line_end":1523,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083045,"byte_end":9083078,"line_start":1524,"line_end":1524,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083079,"byte_end":9083127,"line_start":1525,"line_end":1525,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083128,"byte_end":9083135,"line_start":1526,"line_end":1526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083136,"byte_end":9083147,"line_start":1527,"line_end":1527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083148,"byte_end":9083165,"line_start":1528,"line_end":1528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083691,"byte_end":9083713,"line_start":1545,"line_end":1545,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083344,"byte_end":9083408,"line_start":1534,"line_end":1534,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083409,"byte_end":9083416,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083417,"byte_end":9083440,"line_start":1536,"line_end":1536,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083441,"byte_end":9083477,"line_start":1537,"line_end":1537,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083478,"byte_end":9083499,"line_start":1538,"line_end":1538,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083500,"byte_end":9083547,"line_start":1539,"line_end":1539,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083548,"byte_end":9083589,"line_start":1540,"line_end":1540,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083590,"byte_end":9083597,"line_start":1541,"line_end":1541,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083598,"byte_end":9083609,"line_start":1542,"line_end":1542,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083610,"byte_end":9083627,"line_start":1543,"line_end":1543,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084135,"byte_end":9084153,"line_start":1559,"line_end":1559,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083788,"byte_end":9083848,"line_start":1549,"line_end":1549,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083849,"byte_end":9083856,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083857,"byte_end":9083880,"line_start":1551,"line_end":1551,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083881,"byte_end":9083925,"line_start":1552,"line_end":1552,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083926,"byte_end":9083961,"line_start":1553,"line_end":1553,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9083962,"byte_end":9084033,"line_start":1554,"line_end":1554,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084034,"byte_end":9084041,"line_start":1555,"line_end":1555,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084042,"byte_end":9084053,"line_start":1556,"line_end":1556,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084054,"byte_end":9084071,"line_start":1557,"line_end":1557,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084721,"byte_end":9084741,"line_start":1577,"line_end":1577,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084245,"byte_end":9084285,"line_start":1563,"line_end":1563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084286,"byte_end":9084289,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084290,"byte_end":9084368,"line_start":1565,"line_end":1565,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084369,"byte_end":9084449,"line_start":1566,"line_end":1566,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084450,"byte_end":9084462,"line_start":1567,"line_end":1567,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084463,"byte_end":9084470,"line_start":1568,"line_end":1568,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084471,"byte_end":9084494,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084495,"byte_end":9084520,"line_start":1570,"line_end":1570,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084521,"byte_end":9084558,"line_start":1571,"line_end":1571,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084559,"byte_end":9084619,"line_start":1572,"line_end":1572,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084620,"byte_end":9084627,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084628,"byte_end":9084639,"line_start":1574,"line_end":1574,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084640,"byte_end":9084657,"line_start":1575,"line_end":1575,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085367,"byte_end":9085387,"line_start":1596,"line_end":1596,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084839,"byte_end":9084879,"line_start":1581,"line_end":1581,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084880,"byte_end":9084883,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084884,"byte_end":9084962,"line_start":1583,"line_end":1583,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9084963,"byte_end":9085036,"line_start":1584,"line_end":1584,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085037,"byte_end":9085049,"line_start":1585,"line_end":1585,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085050,"byte_end":9085057,"line_start":1586,"line_end":1586,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085058,"byte_end":9085081,"line_start":1587,"line_end":1587,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085082,"byte_end":9085150,"line_start":1588,"line_end":1588,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085151,"byte_end":9085188,"line_start":1589,"line_end":1589,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085189,"byte_end":9085228,"line_start":1590,"line_end":1590,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085229,"byte_end":9085236,"line_start":1591,"line_end":1591,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085237,"byte_end":9085248,"line_start":1592,"line_end":1592,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085249,"byte_end":9085266,"line_start":1593,"line_end":1593,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085267,"byte_end":9085303,"line_start":1594,"line_end":1594,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085968,"byte_end":9085996,"line_start":1612,"line_end":1612,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085492,"byte_end":9085570,"line_start":1600,"line_end":1600,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085571,"byte_end":9085610,"line_start":1601,"line_end":1601,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085611,"byte_end":9085618,"line_start":1602,"line_end":1602,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085619,"byte_end":9085642,"line_start":1603,"line_end":1603,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085643,"byte_end":9085701,"line_start":1604,"line_end":1604,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085702,"byte_end":9085763,"line_start":1605,"line_end":1605,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085764,"byte_end":9085828,"line_start":1606,"line_end":1606,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085829,"byte_end":9085866,"line_start":1607,"line_end":1607,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085867,"byte_end":9085874,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085875,"byte_end":9085886,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9085887,"byte_end":9085904,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086558,"byte_end":9086570,"line_start":1627,"line_end":1627,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086076,"byte_end":9086120,"line_start":1616,"line_end":1616,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086121,"byte_end":9086128,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086129,"byte_end":9086152,"line_start":1618,"line_end":1618,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086153,"byte_end":9086236,"line_start":1619,"line_end":1619,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086237,"byte_end":9086326,"line_start":1620,"line_end":1620,"column_start":1,"column_end":90}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086327,"byte_end":9086375,"line_start":1621,"line_end":1621,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086376,"byte_end":9086456,"line_start":1622,"line_end":1622,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086457,"byte_end":9086464,"line_start":1623,"line_end":1623,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086465,"byte_end":9086476,"line_start":1624,"line_end":1624,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086477,"byte_end":9086494,"line_start":1625,"line_end":1625,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087051,"byte_end":9087064,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086648,"byte_end":9086693,"line_start":1631,"line_end":1631,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086694,"byte_end":9086701,"line_start":1632,"line_end":1632,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086702,"byte_end":9086725,"line_start":1633,"line_end":1633,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086726,"byte_end":9086784,"line_start":1634,"line_end":1634,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086785,"byte_end":9086846,"line_start":1635,"line_end":1635,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086847,"byte_end":9086896,"line_start":1636,"line_end":1636,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086897,"byte_end":9086949,"line_start":1637,"line_end":1637,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086950,"byte_end":9086957,"line_start":1638,"line_end":1638,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086958,"byte_end":9086969,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9086970,"byte_end":9086987,"line_start":1640,"line_end":1640,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087459,"byte_end":9087468,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087143,"byte_end":9087168,"line_start":1646,"line_end":1646,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087169,"byte_end":9087176,"line_start":1647,"line_end":1647,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087177,"byte_end":9087200,"line_start":1648,"line_end":1648,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087201,"byte_end":9087243,"line_start":1649,"line_end":1649,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087244,"byte_end":9087286,"line_start":1650,"line_end":1650,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087287,"byte_end":9087326,"line_start":1651,"line_end":1651,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087327,"byte_end":9087357,"line_start":1652,"line_end":1652,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087358,"byte_end":9087365,"line_start":1653,"line_end":1653,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087366,"byte_end":9087377,"line_start":1654,"line_end":1654,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087378,"byte_end":9087395,"line_start":1655,"line_end":1655,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087887,"byte_end":9087898,"line_start":1672,"line_end":1672,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087544,"byte_end":9087592,"line_start":1661,"line_end":1661,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087593,"byte_end":9087600,"line_start":1662,"line_end":1662,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087601,"byte_end":9087624,"line_start":1663,"line_end":1663,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087625,"byte_end":9087668,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087669,"byte_end":9087711,"line_start":1665,"line_end":1665,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087712,"byte_end":9087753,"line_start":1666,"line_end":1666,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087754,"byte_end":9087785,"line_start":1667,"line_end":1667,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087786,"byte_end":9087793,"line_start":1668,"line_end":1668,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087794,"byte_end":9087805,"line_start":1669,"line_end":1669,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087806,"byte_end":9087823,"line_start":1670,"line_end":1670,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088445,"byte_end":9088457,"line_start":1687,"line_end":1687,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9087974,"byte_end":9088018,"line_start":1676,"line_end":1676,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088019,"byte_end":9088026,"line_start":1677,"line_end":1677,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088027,"byte_end":9088050,"line_start":1678,"line_end":1678,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088051,"byte_end":9088134,"line_start":1679,"line_end":1679,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088135,"byte_end":9088219,"line_start":1680,"line_end":1680,"column_start":1,"column_end":85}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088220,"byte_end":9088268,"line_start":1681,"line_end":1681,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088269,"byte_end":9088343,"line_start":1682,"line_end":1682,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088344,"byte_end":9088351,"line_start":1683,"line_end":1683,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088352,"byte_end":9088363,"line_start":1684,"line_end":1684,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088364,"byte_end":9088381,"line_start":1685,"line_end":1685,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088941,"byte_end":9088954,"line_start":1702,"line_end":1702,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088535,"byte_end":9088580,"line_start":1691,"line_end":1691,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088581,"byte_end":9088588,"line_start":1692,"line_end":1692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088589,"byte_end":9088612,"line_start":1693,"line_end":1693,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088613,"byte_end":9088671,"line_start":1694,"line_end":1694,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088672,"byte_end":9088733,"line_start":1695,"line_end":1695,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088734,"byte_end":9088783,"line_start":1696,"line_end":1696,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088784,"byte_end":9088839,"line_start":1697,"line_end":1697,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088840,"byte_end":9088847,"line_start":1698,"line_end":1698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088848,"byte_end":9088859,"line_start":1699,"line_end":1699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9088860,"byte_end":9088877,"line_start":1700,"line_end":1700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089350,"byte_end":9089359,"line_start":1717,"line_end":1717,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089033,"byte_end":9089058,"line_start":1706,"line_end":1706,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089059,"byte_end":9089066,"line_start":1707,"line_end":1707,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089067,"byte_end":9089090,"line_start":1708,"line_end":1708,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089091,"byte_end":9089134,"line_start":1709,"line_end":1709,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089135,"byte_end":9089177,"line_start":1710,"line_end":1710,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089178,"byte_end":9089217,"line_start":1711,"line_end":1711,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089218,"byte_end":9089248,"line_start":1712,"line_end":1712,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089249,"byte_end":9089256,"line_start":1713,"line_end":1713,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089257,"byte_end":9089268,"line_start":1714,"line_end":1714,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089269,"byte_end":9089286,"line_start":1715,"line_end":1715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089778,"byte_end":9089789,"line_start":1732,"line_end":1732,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089435,"byte_end":9089483,"line_start":1721,"line_end":1721,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089484,"byte_end":9089491,"line_start":1722,"line_end":1722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089492,"byte_end":9089515,"line_start":1723,"line_end":1723,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089516,"byte_end":9089559,"line_start":1724,"line_end":1724,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089560,"byte_end":9089602,"line_start":1725,"line_end":1725,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089603,"byte_end":9089644,"line_start":1726,"line_end":1726,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089645,"byte_end":9089676,"line_start":1727,"line_end":1727,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089677,"byte_end":9089684,"line_start":1728,"line_end":1728,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089685,"byte_end":9089696,"line_start":1729,"line_end":1729,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089697,"byte_end":9089714,"line_start":1730,"line_end":1730,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090174,"byte_end":9090190,"line_start":1746,"line_end":1746,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089865,"byte_end":9089925,"line_start":1736,"line_end":1736,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089926,"byte_end":9089933,"line_start":1737,"line_end":1737,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089934,"byte_end":9089957,"line_start":1738,"line_end":1738,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089958,"byte_end":9089994,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9089995,"byte_end":9090027,"line_start":1740,"line_end":1740,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090028,"byte_end":9090072,"line_start":1741,"line_end":1741,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090073,"byte_end":9090080,"line_start":1742,"line_end":1742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090081,"byte_end":9090092,"line_start":1743,"line_end":1743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090093,"byte_end":9090110,"line_start":1744,"line_end":1744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090625,"byte_end":9090651,"line_start":1761,"line_end":1761,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090255,"byte_end":9090329,"line_start":1750,"line_end":1750,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090330,"byte_end":9090337,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090338,"byte_end":9090361,"line_start":1752,"line_end":1752,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090362,"byte_end":9090398,"line_start":1753,"line_end":1753,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090399,"byte_end":9090435,"line_start":1754,"line_end":1754,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090436,"byte_end":9090481,"line_start":1755,"line_end":1755,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090482,"byte_end":9090523,"line_start":1756,"line_end":1756,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090524,"byte_end":9090531,"line_start":1757,"line_end":1757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090532,"byte_end":9090543,"line_start":1758,"line_end":1758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090544,"byte_end":9090561,"line_start":1759,"line_end":1759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091142,"byte_end":9091160,"line_start":1777,"line_end":1777,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090728,"byte_end":9090771,"line_start":1765,"line_end":1765,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090772,"byte_end":9090775,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090776,"byte_end":9090839,"line_start":1767,"line_end":1767,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090840,"byte_end":9090847,"line_start":1768,"line_end":1768,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090848,"byte_end":9090871,"line_start":1769,"line_end":1769,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090872,"byte_end":9090966,"line_start":1770,"line_end":1770,"column_start":1,"column_end":95}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9090967,"byte_end":9091001,"line_start":1771,"line_end":1771,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091002,"byte_end":9091040,"line_start":1772,"line_end":1772,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091041,"byte_end":9091048,"line_start":1773,"line_end":1773,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091049,"byte_end":9091060,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091061,"byte_end":9091078,"line_start":1775,"line_end":1775,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091550,"byte_end":9091565,"line_start":1793,"line_end":1793,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091219,"byte_end":9091257,"line_start":1781,"line_end":1781,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091258,"byte_end":9091261,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091262,"byte_end":9091314,"line_start":1783,"line_end":1783,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091315,"byte_end":9091322,"line_start":1784,"line_end":1784,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091323,"byte_end":9091346,"line_start":1785,"line_end":1785,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091347,"byte_end":9091391,"line_start":1786,"line_end":1786,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091392,"byte_end":9091423,"line_start":1787,"line_end":1787,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091424,"byte_end":9091448,"line_start":1788,"line_end":1788,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091449,"byte_end":9091456,"line_start":1789,"line_end":1789,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091457,"byte_end":9091468,"line_start":1790,"line_end":1790,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091469,"byte_end":9091486,"line_start":1791,"line_end":1791,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092052,"byte_end":9092075,"line_start":1809,"line_end":1809,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091622,"byte_end":9091695,"line_start":1797,"line_end":1797,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091696,"byte_end":9091699,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091700,"byte_end":9091707,"line_start":1799,"line_end":1799,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091708,"byte_end":9091731,"line_start":1800,"line_end":1800,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091732,"byte_end":9091777,"line_start":1801,"line_end":1801,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091778,"byte_end":9091823,"line_start":1802,"line_end":1802,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091824,"byte_end":9091883,"line_start":1803,"line_end":1803,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091884,"byte_end":9091950,"line_start":1804,"line_end":1804,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091951,"byte_end":9091958,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091959,"byte_end":9091970,"line_start":1806,"line_end":1806,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9091971,"byte_end":9091988,"line_start":1807,"line_end":1807,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092477,"byte_end":9092486,"line_start":1824,"line_end":1824,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092154,"byte_end":9092175,"line_start":1813,"line_end":1813,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092176,"byte_end":9092183,"line_start":1814,"line_end":1814,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092184,"byte_end":9092207,"line_start":1815,"line_end":1815,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092208,"byte_end":9092252,"line_start":1816,"line_end":1816,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092253,"byte_end":9092298,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092299,"byte_end":9092338,"line_start":1818,"line_end":1818,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092339,"byte_end":9092375,"line_start":1819,"line_end":1819,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092376,"byte_end":9092383,"line_start":1820,"line_end":1820,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092384,"byte_end":9092395,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092396,"byte_end":9092413,"line_start":1822,"line_end":1822,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092911,"byte_end":9092922,"line_start":1839,"line_end":1839,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092562,"byte_end":9092607,"line_start":1828,"line_end":1828,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092608,"byte_end":9092615,"line_start":1829,"line_end":1829,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092616,"byte_end":9092639,"line_start":1830,"line_end":1830,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092640,"byte_end":9092684,"line_start":1831,"line_end":1831,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092685,"byte_end":9092732,"line_start":1832,"line_end":1832,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092733,"byte_end":9092774,"line_start":1833,"line_end":1833,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092775,"byte_end":9092809,"line_start":1834,"line_end":1834,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092810,"byte_end":9092817,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092818,"byte_end":9092829,"line_start":1836,"line_end":1836,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092830,"byte_end":9092847,"line_start":1837,"line_end":1837,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093467,"byte_end":9093490,"line_start":1855,"line_end":1855,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9092998,"byte_end":9093071,"line_start":1843,"line_end":1843,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093072,"byte_end":9093090,"line_start":1844,"line_end":1844,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093091,"byte_end":9093098,"line_start":1845,"line_end":1845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093099,"byte_end":9093122,"line_start":1846,"line_end":1846,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093123,"byte_end":9093188,"line_start":1847,"line_end":1847,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093189,"byte_end":9093257,"line_start":1848,"line_end":1848,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093258,"byte_end":9093317,"line_start":1849,"line_end":1849,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093318,"byte_end":9093365,"line_start":1850,"line_end":1850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093366,"byte_end":9093373,"line_start":1851,"line_end":1851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093374,"byte_end":9093385,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093386,"byte_end":9093403,"line_start":1853,"line_end":1853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094042,"byte_end":9094065,"line_start":1871,"line_end":1871,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093571,"byte_end":9093644,"line_start":1859,"line_end":1859,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093645,"byte_end":9093663,"line_start":1860,"line_end":1860,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093664,"byte_end":9093671,"line_start":1861,"line_end":1861,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093672,"byte_end":9093695,"line_start":1862,"line_end":1862,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093696,"byte_end":9093760,"line_start":1863,"line_end":1863,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093761,"byte_end":9093828,"line_start":1864,"line_end":1864,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093829,"byte_end":9093888,"line_start":1865,"line_end":1865,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093889,"byte_end":9093940,"line_start":1866,"line_end":1866,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093941,"byte_end":9093948,"line_start":1867,"line_end":1867,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093949,"byte_end":9093960,"line_start":1868,"line_end":1868,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9093961,"byte_end":9093978,"line_start":1869,"line_end":1869,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094629,"byte_end":9094651,"line_start":1887,"line_end":1887,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094146,"byte_end":9094218,"line_start":1875,"line_end":1875,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094219,"byte_end":9094237,"line_start":1876,"line_end":1876,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094238,"byte_end":9094245,"line_start":1877,"line_end":1877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094246,"byte_end":9094269,"line_start":1878,"line_end":1878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094270,"byte_end":9094335,"line_start":1879,"line_end":1879,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094336,"byte_end":9094404,"line_start":1880,"line_end":1880,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094405,"byte_end":9094463,"line_start":1881,"line_end":1881,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094464,"byte_end":9094527,"line_start":1882,"line_end":1882,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094528,"byte_end":9094535,"line_start":1883,"line_end":1883,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094536,"byte_end":9094547,"line_start":1884,"line_end":1884,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094548,"byte_end":9094565,"line_start":1885,"line_end":1885,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095045,"byte_end":9095056,"line_start":1902,"line_end":1902,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094732,"byte_end":9094752,"line_start":1891,"line_end":1891,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094753,"byte_end":9094760,"line_start":1892,"line_end":1892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094761,"byte_end":9094784,"line_start":1893,"line_end":1893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094785,"byte_end":9094827,"line_start":1894,"line_end":1894,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094828,"byte_end":9094870,"line_start":1895,"line_end":1895,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094871,"byte_end":9094912,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094913,"byte_end":9094943,"line_start":1897,"line_end":1897,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094944,"byte_end":9094951,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094952,"byte_end":9094963,"line_start":1899,"line_end":1899,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9094964,"byte_end":9094981,"line_start":1900,"line_end":1900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095444,"byte_end":9095455,"line_start":1917,"line_end":1917,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095131,"byte_end":9095151,"line_start":1906,"line_end":1906,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095152,"byte_end":9095159,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095160,"byte_end":9095183,"line_start":1908,"line_end":1908,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095184,"byte_end":9095222,"line_start":1909,"line_end":1909,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095223,"byte_end":9095261,"line_start":1910,"line_end":1910,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095262,"byte_end":9095309,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095310,"byte_end":9095342,"line_start":1912,"line_end":1912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095343,"byte_end":9095350,"line_start":1913,"line_end":1913,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095351,"byte_end":9095362,"line_start":1914,"line_end":1914,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095363,"byte_end":9095380,"line_start":1915,"line_end":1915,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095978,"byte_end":9095998,"line_start":1932,"line_end":1932,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095533,"byte_end":9095591,"line_start":1921,"line_end":1921,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095592,"byte_end":9095599,"line_start":1922,"line_end":1922,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095600,"byte_end":9095623,"line_start":1923,"line_end":1923,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095624,"byte_end":9095678,"line_start":1924,"line_end":1924,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095679,"byte_end":9095740,"line_start":1925,"line_end":1925,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095741,"byte_end":9095797,"line_start":1926,"line_end":1926,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095798,"byte_end":9095876,"line_start":1927,"line_end":1927,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095877,"byte_end":9095884,"line_start":1928,"line_end":1928,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095885,"byte_end":9095896,"line_start":1929,"line_end":1929,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9095897,"byte_end":9095914,"line_start":1930,"line_end":1930,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096465,"byte_end":9096486,"line_start":1947,"line_end":1947,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096079,"byte_end":9096138,"line_start":1936,"line_end":1936,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096139,"byte_end":9096146,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096147,"byte_end":9096170,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096171,"byte_end":9096213,"line_start":1939,"line_end":1939,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096214,"byte_end":9096256,"line_start":1940,"line_end":1940,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096257,"byte_end":9096314,"line_start":1941,"line_end":1941,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096315,"byte_end":9096363,"line_start":1942,"line_end":1942,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096364,"byte_end":9096371,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096372,"byte_end":9096383,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096384,"byte_end":9096401,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097028,"byte_end":9097048,"line_start":1962,"line_end":1962,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096567,"byte_end":9096625,"line_start":1951,"line_end":1951,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096626,"byte_end":9096633,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096634,"byte_end":9096657,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096658,"byte_end":9096716,"line_start":1954,"line_end":1954,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096717,"byte_end":9096780,"line_start":1955,"line_end":1955,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096781,"byte_end":9096837,"line_start":1956,"line_end":1956,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096838,"byte_end":9096926,"line_start":1957,"line_end":1957,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096927,"byte_end":9096934,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096935,"byte_end":9096946,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9096947,"byte_end":9096964,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097779,"byte_end":9097803,"line_start":1981,"line_end":1981,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097130,"byte_end":9097177,"line_start":1966,"line_end":1966,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097178,"byte_end":9097181,"line_start":1967,"line_end":1967,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097182,"byte_end":9097251,"line_start":1968,"line_end":1968,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097252,"byte_end":9097302,"line_start":1969,"line_end":1969,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097303,"byte_end":9097355,"line_start":1970,"line_end":1970,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097356,"byte_end":9097363,"line_start":1971,"line_end":1971,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097364,"byte_end":9097387,"line_start":1972,"line_end":1972,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097388,"byte_end":9097477,"line_start":1973,"line_end":1973,"column_start":1,"column_end":90}},{"value":"/ let b = m128i::from([20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097478,"byte_end":9097581,"line_start":1974,"line_end":1974,"column_start":1,"column_end":104}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097582,"byte_end":9097642,"line_start":1975,"line_end":1975,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097643,"byte_end":9097677,"line_start":1976,"line_end":1976,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097678,"byte_end":9097685,"line_start":1977,"line_end":1977,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097686,"byte_end":9097697,"line_start":1978,"line_end":1978,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097698,"byte_end":9097715,"line_start":1979,"line_end":1979,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098380,"byte_end":9098392,"line_start":1997,"line_end":1997,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097881,"byte_end":9097943,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097944,"byte_end":9097951,"line_start":1986,"line_end":1986,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097952,"byte_end":9097975,"line_start":1987,"line_end":1987,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9097976,"byte_end":9098059,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098060,"byte_end":9098142,"line_start":1989,"line_end":1989,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098143,"byte_end":9098200,"line_start":1990,"line_end":1990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098201,"byte_end":9098208,"line_start":1991,"line_end":1991,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098209,"byte_end":9098220,"line_start":1992,"line_end":1992,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098221,"byte_end":9098238,"line_start":1993,"line_end":1993,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098239,"byte_end":9098275,"line_start":1994,"line_end":1994,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098276,"byte_end":9098316,"line_start":1995,"line_end":1995,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099042,"byte_end":9099055,"line_start":2013,"line_end":2013,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098600,"byte_end":9098662,"line_start":2001,"line_end":2001,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098663,"byte_end":9098670,"line_start":2002,"line_end":2002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098671,"byte_end":9098694,"line_start":2003,"line_end":2003,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098695,"byte_end":9098749,"line_start":2004,"line_end":2004,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098750,"byte_end":9098804,"line_start":2005,"line_end":2005,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098805,"byte_end":9098862,"line_start":2006,"line_end":2006,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098863,"byte_end":9098870,"line_start":2007,"line_end":2007,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098871,"byte_end":9098882,"line_start":2008,"line_end":2008,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098883,"byte_end":9098900,"line_start":2009,"line_end":2009,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098901,"byte_end":9098937,"line_start":2010,"line_end":2010,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9098938,"byte_end":9098978,"line_start":2011,"line_end":2011,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099524,"byte_end":9099537,"line_start":2027,"line_end":2027,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099192,"byte_end":9099254,"line_start":2017,"line_end":2017,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099255,"byte_end":9099262,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099263,"byte_end":9099286,"line_start":2019,"line_end":2019,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099287,"byte_end":9099325,"line_start":2020,"line_end":2020,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099326,"byte_end":9099364,"line_start":2021,"line_end":2021,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099365,"byte_end":9099422,"line_start":2022,"line_end":2022,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099423,"byte_end":9099430,"line_start":2023,"line_end":2023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099431,"byte_end":9099442,"line_start":2024,"line_end":2024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099443,"byte_end":9099460,"line_start":2025,"line_end":2025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099954,"byte_end":9099967,"line_start":2041,"line_end":2041,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099630,"byte_end":9099692,"line_start":2031,"line_end":2031,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099693,"byte_end":9099700,"line_start":2032,"line_end":2032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099701,"byte_end":9099724,"line_start":2033,"line_end":2033,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099725,"byte_end":9099761,"line_start":2034,"line_end":2034,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099762,"byte_end":9099794,"line_start":2035,"line_end":2035,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099795,"byte_end":9099852,"line_start":2036,"line_end":2036,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099853,"byte_end":9099860,"line_start":2037,"line_end":2037,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099861,"byte_end":9099872,"line_start":2038,"line_end":2038,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9099873,"byte_end":9099890,"line_start":2039,"line_end":2039,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100355,"byte_end":9100364,"line_start":2055,"line_end":2055,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100039,"byte_end":9100101,"line_start":2045,"line_end":2045,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100102,"byte_end":9100109,"line_start":2046,"line_end":2046,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100110,"byte_end":9100133,"line_start":2047,"line_end":2047,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100134,"byte_end":9100176,"line_start":2048,"line_end":2048,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100177,"byte_end":9100209,"line_start":2049,"line_end":2049,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100210,"byte_end":9100253,"line_start":2050,"line_end":2050,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100254,"byte_end":9100261,"line_start":2051,"line_end":2051,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100262,"byte_end":9100273,"line_start":2052,"line_end":2052,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100274,"byte_end":9100291,"line_start":2053,"line_end":2053,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100732,"byte_end":9100743,"line_start":2069,"line_end":2069,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100432,"byte_end":9100481,"line_start":2059,"line_end":2059,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100482,"byte_end":9100489,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100490,"byte_end":9100513,"line_start":2061,"line_end":2061,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100514,"byte_end":9100556,"line_start":2062,"line_end":2062,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100557,"byte_end":9100586,"line_start":2063,"line_end":2063,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100587,"byte_end":9100630,"line_start":2064,"line_end":2064,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100631,"byte_end":9100638,"line_start":2065,"line_end":2065,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100639,"byte_end":9100650,"line_start":2066,"line_end":2066,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100651,"byte_end":9100668,"line_start":2067,"line_end":2067,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101106,"byte_end":9101121,"line_start":2083,"line_end":2083,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100800,"byte_end":9100851,"line_start":2073,"line_end":2073,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100852,"byte_end":9100859,"line_start":2074,"line_end":2074,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100860,"byte_end":9100883,"line_start":2075,"line_end":2075,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100884,"byte_end":9100926,"line_start":2076,"line_end":2076,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100927,"byte_end":9100960,"line_start":2077,"line_end":2077,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9100961,"byte_end":9101004,"line_start":2078,"line_end":2078,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101005,"byte_end":9101012,"line_start":2079,"line_end":2079,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101013,"byte_end":9101024,"line_start":2080,"line_end":2080,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101025,"byte_end":9101042,"line_start":2081,"line_end":2081,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101532,"byte_end":9101550,"line_start":2097,"line_end":2097,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101179,"byte_end":9101227,"line_start":2087,"line_end":2087,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101228,"byte_end":9101235,"line_start":2088,"line_end":2088,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101236,"byte_end":9101259,"line_start":2089,"line_end":2089,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101260,"byte_end":9101337,"line_start":2090,"line_end":2090,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101338,"byte_end":9101372,"line_start":2091,"line_end":2091,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101373,"byte_end":9101430,"line_start":2092,"line_end":2092,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101431,"byte_end":9101438,"line_start":2093,"line_end":2093,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101439,"byte_end":9101450,"line_start":2094,"line_end":2094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101451,"byte_end":9101468,"line_start":2095,"line_end":2095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101941,"byte_end":9101960,"line_start":2111,"line_end":2111,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101609,"byte_end":9101658,"line_start":2101,"line_end":2101,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101659,"byte_end":9101666,"line_start":2102,"line_end":2102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101667,"byte_end":9101690,"line_start":2103,"line_end":2103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101691,"byte_end":9101745,"line_start":2104,"line_end":2104,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101746,"byte_end":9101781,"line_start":2105,"line_end":2105,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101782,"byte_end":9101839,"line_start":2106,"line_end":2106,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101840,"byte_end":9101847,"line_start":2107,"line_end":2107,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101848,"byte_end":9101859,"line_start":2108,"line_end":2108,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9101860,"byte_end":9101877,"line_start":2109,"line_end":2109,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102337,"byte_end":9102356,"line_start":2125,"line_end":2125,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102021,"byte_end":9102070,"line_start":2115,"line_end":2115,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102071,"byte_end":9102078,"line_start":2116,"line_end":2116,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102079,"byte_end":9102102,"line_start":2117,"line_end":2117,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102103,"byte_end":9102141,"line_start":2118,"line_end":2118,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102142,"byte_end":9102177,"line_start":2119,"line_end":2119,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102178,"byte_end":9102235,"line_start":2120,"line_end":2120,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102236,"byte_end":9102243,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102244,"byte_end":9102255,"line_start":2122,"line_end":2122,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102256,"byte_end":9102273,"line_start":2123,"line_end":2123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102732,"byte_end":9102751,"line_start":2139,"line_end":2139,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102417,"byte_end":9102467,"line_start":2129,"line_end":2129,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102468,"byte_end":9102475,"line_start":2130,"line_end":2130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102476,"byte_end":9102499,"line_start":2131,"line_end":2131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102500,"byte_end":9102536,"line_start":2132,"line_end":2132,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102537,"byte_end":9102572,"line_start":2133,"line_end":2133,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102573,"byte_end":9102630,"line_start":2134,"line_end":2134,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102631,"byte_end":9102638,"line_start":2135,"line_end":2135,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102639,"byte_end":9102650,"line_start":2136,"line_end":2136,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102651,"byte_end":9102668,"line_start":2137,"line_end":2137,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103320,"byte_end":9103341,"line_start":2155,"line_end":2155,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102813,"byte_end":9102874,"line_start":2143,"line_end":2143,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102875,"byte_end":9102882,"line_start":2144,"line_end":2144,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102883,"byte_end":9102906,"line_start":2145,"line_end":2145,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102907,"byte_end":9102990,"line_start":2146,"line_end":2146,"column_start":1,"column_end":84}},{"value":"/ let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9102991,"byte_end":9103082,"line_start":2147,"line_end":2147,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103083,"byte_end":9103140,"line_start":2148,"line_end":2148,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103141,"byte_end":9103148,"line_start":2149,"line_end":2149,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103149,"byte_end":9103160,"line_start":2150,"line_end":2150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103161,"byte_end":9103178,"line_start":2151,"line_end":2151,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103179,"byte_end":9103215,"line_start":2152,"line_end":2152,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103216,"byte_end":9103256,"line_start":2153,"line_end":2153,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104000,"byte_end":9104022,"line_start":2171,"line_end":2171,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103550,"byte_end":9103611,"line_start":2159,"line_end":2159,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103612,"byte_end":9103619,"line_start":2160,"line_end":2160,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103620,"byte_end":9103643,"line_start":2161,"line_end":2161,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103644,"byte_end":9103698,"line_start":2162,"line_end":2162,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103699,"byte_end":9103762,"line_start":2163,"line_end":2163,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103763,"byte_end":9103820,"line_start":2164,"line_end":2164,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103821,"byte_end":9103828,"line_start":2165,"line_end":2165,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103829,"byte_end":9103840,"line_start":2166,"line_end":2166,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103841,"byte_end":9103858,"line_start":2167,"line_end":2167,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103859,"byte_end":9103895,"line_start":2168,"line_end":2168,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9103896,"byte_end":9103936,"line_start":2169,"line_end":2169,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104500,"byte_end":9104522,"line_start":2185,"line_end":2185,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104160,"byte_end":9104221,"line_start":2175,"line_end":2175,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104222,"byte_end":9104229,"line_start":2176,"line_end":2176,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104230,"byte_end":9104253,"line_start":2177,"line_end":2177,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104254,"byte_end":9104292,"line_start":2178,"line_end":2178,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104293,"byte_end":9104340,"line_start":2179,"line_end":2179,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104341,"byte_end":9104398,"line_start":2180,"line_end":2180,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104399,"byte_end":9104406,"line_start":2181,"line_end":2181,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104407,"byte_end":9104418,"line_start":2182,"line_end":2182,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104419,"byte_end":9104436,"line_start":2183,"line_end":2183,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104940,"byte_end":9104958,"line_start":2199,"line_end":2199,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104616,"byte_end":9104677,"line_start":2189,"line_end":2189,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104678,"byte_end":9104685,"line_start":2190,"line_end":2190,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104686,"byte_end":9104709,"line_start":2191,"line_end":2191,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104710,"byte_end":9104752,"line_start":2192,"line_end":2192,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104753,"byte_end":9104794,"line_start":2193,"line_end":2193,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104795,"byte_end":9104838,"line_start":2194,"line_end":2194,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104839,"byte_end":9104846,"line_start":2195,"line_end":2195,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104847,"byte_end":9104858,"line_start":2196,"line_end":2196,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9104859,"byte_end":9104876,"line_start":2197,"line_end":2197,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105242,"byte_end":9105254,"line_start":2212,"line_end":2212,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105027,"byte_end":9105046,"line_start":2203,"line_end":2203,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105047,"byte_end":9105054,"line_start":2204,"line_end":2204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105055,"byte_end":9105078,"line_start":2205,"line_end":2205,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105079,"byte_end":9105106,"line_start":2206,"line_end":2206,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105107,"byte_end":9105140,"line_start":2207,"line_end":2207,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105141,"byte_end":9105148,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105149,"byte_end":9105160,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105161,"byte_end":9105178,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105535,"byte_end":9105547,"line_start":2225,"line_end":2225,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105311,"byte_end":9105331,"line_start":2216,"line_end":2216,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105332,"byte_end":9105339,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105340,"byte_end":9105363,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105364,"byte_end":9105391,"line_start":2219,"line_end":2219,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105392,"byte_end":9105433,"line_start":2220,"line_end":2220,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105434,"byte_end":9105441,"line_start":2221,"line_end":2221,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105442,"byte_end":9105453,"line_start":2222,"line_end":2222,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105454,"byte_end":9105471,"line_start":2223,"line_end":2223,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106054,"byte_end":9106078,"line_start":2244,"line_end":2244,"column_start":8,"column_end":32},"name":"shuffle_ai_f32_all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_f32_all_m128i","value":"pub fn shuffle_ai_f32_all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `i32` lanes in `$a` using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `i32` lanes in `$a` using an immediate","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105601,"byte_end":9105655,"line_start":2229,"line_end":2229,"column_start":1,"column_end":55}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105656,"byte_end":9105674,"line_start":2230,"line_end":2230,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105675,"byte_end":9105678,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105679,"byte_end":9105686,"line_start":2232,"line_end":2232,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105687,"byte_end":9105710,"line_start":2233,"line_end":2233,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([6, 7, 8, 9]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105711,"byte_end":9105749,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105750,"byte_end":9105756,"line_start":2235,"line_end":2235,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_f32_all_m128i::<0b01_10_10_00>(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105757,"byte_end":9105814,"line_start":2236,"line_end":2236,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(<[i32; 4]>::from(c), [6, 8, 8, 7]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105815,"byte_end":9105865,"line_start":2237,"line_end":2237,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105866,"byte_end":9105873,"line_start":2238,"line_end":2238,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi32`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105874,"byte_end":9105916,"line_start":2239,"line_end":2239,"column_start":1,"column_end":43}},{"value":"/ * **Assembly:** `pshufd xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105917,"byte_end":9105960,"line_start":2240,"line_end":2240,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105961,"byte_end":9105972,"line_start":2241,"line_end":2241,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9105973,"byte_end":9105990,"line_start":2242,"line_end":2242,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107167,"byte_end":9107192,"line_start":2272,"line_end":2272,"column_start":8,"column_end":33},"name":"shuffle_abi_f64_all_m128d","qualname":"::x86_x64::sse2::shuffle_abi_f64_all_m128d","value":"pub fn shuffle_abi_f64_all_m128d<const MASK: i32>(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f64` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f64` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106169,"byte_end":9106243,"line_start":2248,"line_end":2248,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106244,"byte_end":9106262,"line_start":2249,"line_end":2249,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106263,"byte_end":9106266,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106267,"byte_end":9106346,"line_start":2251,"line_end":2251,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106347,"byte_end":9106424,"line_start":2252,"line_end":2252,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106425,"byte_end":9106505,"line_start":2253,"line_end":2253,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106506,"byte_end":9106509,"line_start":2254,"line_end":2254,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106510,"byte_end":9106587,"line_start":2255,"line_end":2255,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106588,"byte_end":9106665,"line_start":2256,"line_end":2256,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f64_all_m128d`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106666,"byte_end":9106743,"line_start":2257,"line_end":2257,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106744,"byte_end":9106751,"line_start":2258,"line_end":2258,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106752,"byte_end":9106775,"line_start":2259,"line_end":2259,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106776,"byte_end":9106818,"line_start":2260,"line_end":2260,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([3.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106819,"byte_end":9106861,"line_start":2261,"line_end":2261,"column_start":1,"column_end":43}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106862,"byte_end":9106868,"line_start":2262,"line_end":2262,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b00>(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106869,"byte_end":9106932,"line_start":2263,"line_end":2263,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 3.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106933,"byte_end":9106963,"line_start":2264,"line_end":2264,"column_start":1,"column_end":31}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106964,"byte_end":9106970,"line_start":2265,"line_end":2265,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b10>(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9106971,"byte_end":9107034,"line_start":2266,"line_end":2266,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107035,"byte_end":9107065,"line_start":2267,"line_end":2267,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107066,"byte_end":9107073,"line_start":2268,"line_end":2268,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107074,"byte_end":9107085,"line_start":2269,"line_end":2269,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107086,"byte_end":9107103,"line_start":2270,"line_end":2270,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107776,"byte_end":9107803,"line_start":2288,"line_end":2288,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_h64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_h64all_m128i","value":"pub fn shuffle_ai_i16_h64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the high `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);\n ```\n * **Intrinsic:** [`_mm_shufflehi_epi16`]\n * **Assembly:** `pshufhw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the high `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107295,"byte_end":9107369,"line_start":2276,"line_end":2276,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107370,"byte_end":9107377,"line_start":2277,"line_end":2277,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107378,"byte_end":9107401,"line_start":2278,"line_end":2278,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107402,"byte_end":9107456,"line_start":2279,"line_end":2279,"column_start":1,"column_end":55}},{"value":"/ let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107457,"byte_end":9107517,"line_start":2280,"line_end":2280,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107518,"byte_end":9107584,"line_start":2281,"line_end":2281,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107585,"byte_end":9107592,"line_start":2282,"line_end":2282,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflehi_epi16`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107593,"byte_end":9107637,"line_start":2283,"line_end":2283,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshufhw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107638,"byte_end":9107682,"line_start":2284,"line_end":2284,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107683,"byte_end":9107694,"line_start":2285,"line_end":2285,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107695,"byte_end":9107712,"line_start":2286,"line_end":2286,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108383,"byte_end":9108410,"line_start":2305,"line_end":2305,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_l64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_l64all_m128i","value":"pub fn shuffle_ai_i16_l64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the low `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n //\n let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);\n ```\n * **Intrinsic:** [`_mm_shufflelo_epi16`]\n * **Assembly:** `pshuflw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the low `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107896,"byte_end":9107969,"line_start":2292,"line_end":2292,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107970,"byte_end":9107977,"line_start":2293,"line_end":2293,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9107978,"byte_end":9108001,"line_start":2294,"line_end":2294,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108002,"byte_end":9108056,"line_start":2295,"line_end":2295,"column_start":1,"column_end":55}},{"value":"/ //","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108057,"byte_end":9108063,"line_start":2296,"line_end":2296,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108064,"byte_end":9108124,"line_start":2297,"line_end":2297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108125,"byte_end":9108191,"line_start":2298,"line_end":2298,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108192,"byte_end":9108199,"line_start":2299,"line_end":2299,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflelo_epi16`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108200,"byte_end":9108244,"line_start":2300,"line_end":2300,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshuflw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108245,"byte_end":9108289,"line_start":2301,"line_end":2301,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108290,"byte_end":9108301,"line_start":2302,"line_end":2302,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108302,"byte_end":9108319,"line_start":2303,"line_end":2303,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108974,"byte_end":9108991,"line_start":2322,"line_end":2322,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108503,"byte_end":9108580,"line_start":2309,"line_end":2309,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108581,"byte_end":9108584,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108585,"byte_end":9108605,"line_start":2311,"line_end":2311,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108606,"byte_end":9108613,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108614,"byte_end":9108637,"line_start":2313,"line_end":2313,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108638,"byte_end":9108692,"line_start":2314,"line_end":2314,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108693,"byte_end":9108729,"line_start":2315,"line_end":2315,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108730,"byte_end":9108783,"line_start":2316,"line_end":2316,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108784,"byte_end":9108872,"line_start":2317,"line_end":2317,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108873,"byte_end":9108880,"line_start":2318,"line_end":2318,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108881,"byte_end":9108892,"line_start":2319,"line_end":2319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9108893,"byte_end":9108910,"line_start":2320,"line_end":2320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109501,"byte_end":9109518,"line_start":2339,"line_end":2339,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109078,"byte_end":9109155,"line_start":2326,"line_end":2326,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109156,"byte_end":9109159,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109160,"byte_end":9109180,"line_start":2328,"line_end":2328,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109181,"byte_end":9109188,"line_start":2329,"line_end":2329,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109189,"byte_end":9109212,"line_start":2330,"line_end":2330,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109213,"byte_end":9109255,"line_start":2331,"line_end":2331,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109256,"byte_end":9109292,"line_start":2332,"line_end":2332,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109293,"byte_end":9109346,"line_start":2333,"line_end":2333,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109347,"byte_end":9109399,"line_start":2334,"line_end":2334,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109400,"byte_end":9109407,"line_start":2335,"line_end":2335,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109408,"byte_end":9109419,"line_start":2336,"line_end":2336,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109420,"byte_end":9109437,"line_start":2337,"line_end":2337,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110006,"byte_end":9110023,"line_start":2356,"line_end":2356,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109605,"byte_end":9109682,"line_start":2343,"line_end":2343,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109683,"byte_end":9109686,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109687,"byte_end":9109707,"line_start":2345,"line_end":2345,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109708,"byte_end":9109715,"line_start":2346,"line_end":2346,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109716,"byte_end":9109739,"line_start":2347,"line_end":2347,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109740,"byte_end":9109776,"line_start":2348,"line_end":2348,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109777,"byte_end":9109813,"line_start":2349,"line_end":2349,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109814,"byte_end":9109867,"line_start":2350,"line_end":2350,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109868,"byte_end":9109904,"line_start":2351,"line_end":2351,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109905,"byte_end":9109912,"line_start":2352,"line_end":2352,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109913,"byte_end":9109924,"line_start":2353,"line_end":2353,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9109925,"byte_end":9109942,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110496,"byte_end":9110513,"line_start":2371,"line_end":2371,"column_start":8,"column_end":25},"name":"shl_imm_u16_m128i","qualname":"::x86_x64::sse2::shl_imm_u16_m128i","value":"pub fn shl_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes left by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110110,"byte_end":9110158,"line_start":2360,"line_end":2360,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110159,"byte_end":9110162,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110163,"byte_end":9110170,"line_start":2362,"line_end":2362,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110171,"byte_end":9110194,"line_start":2363,"line_end":2363,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110195,"byte_end":9110249,"line_start":2364,"line_end":2364,"column_start":1,"column_end":55}},{"value":"/ let c: [u16; 8] = shl_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110250,"byte_end":9110305,"line_start":2365,"line_end":2365,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110306,"byte_end":9110394,"line_start":2366,"line_end":2366,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110395,"byte_end":9110402,"line_start":2367,"line_end":2367,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110403,"byte_end":9110414,"line_start":2368,"line_end":2368,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110415,"byte_end":9110432,"line_start":2369,"line_end":2369,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110933,"byte_end":9110950,"line_start":2386,"line_end":2386,"column_start":8,"column_end":25},"name":"shl_imm_u32_m128i","qualname":"::x86_x64::sse2::shl_imm_u32_m128i","value":"pub fn shl_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes left by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110599,"byte_end":9110647,"line_start":2375,"line_end":2375,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110648,"byte_end":9110651,"line_start":2376,"line_end":2376,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110652,"byte_end":9110659,"line_start":2377,"line_end":2377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110660,"byte_end":9110683,"line_start":2378,"line_end":2378,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110684,"byte_end":9110722,"line_start":2379,"line_end":2379,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = shl_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110723,"byte_end":9110778,"line_start":2380,"line_end":2380,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110779,"byte_end":9110831,"line_start":2381,"line_end":2381,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110832,"byte_end":9110839,"line_start":2382,"line_end":2382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110840,"byte_end":9110851,"line_start":2383,"line_end":2383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9110852,"byte_end":9110869,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111357,"byte_end":9111374,"line_start":2401,"line_end":2401,"column_start":8,"column_end":25},"name":"shl_imm_u64_m128i","qualname":"::x86_x64::sse2::shl_imm_u64_m128i","value":"pub fn shl_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes left by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111036,"byte_end":9111085,"line_start":2390,"line_end":2390,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111086,"byte_end":9111089,"line_start":2391,"line_end":2391,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111090,"byte_end":9111097,"line_start":2392,"line_end":2392,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111098,"byte_end":9111121,"line_start":2393,"line_end":2393,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111122,"byte_end":9111158,"line_start":2394,"line_end":2394,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111159,"byte_end":9111214,"line_start":2395,"line_end":2395,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111215,"byte_end":9111255,"line_start":2396,"line_end":2396,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111256,"byte_end":9111263,"line_start":2397,"line_end":2397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111264,"byte_end":9111275,"line_start":2398,"line_end":2398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111276,"byte_end":9111293,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111731,"byte_end":9111741,"line_start":2415,"line_end":2415,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111460,"byte_end":9111483,"line_start":2405,"line_end":2405,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111484,"byte_end":9111491,"line_start":2406,"line_end":2406,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111492,"byte_end":9111515,"line_start":2407,"line_end":2407,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111516,"byte_end":9111560,"line_start":2408,"line_end":2408,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111561,"byte_end":9111598,"line_start":2409,"line_end":2409,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111599,"byte_end":9111629,"line_start":2410,"line_end":2410,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111630,"byte_end":9111637,"line_start":2411,"line_end":2411,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111638,"byte_end":9111649,"line_start":2412,"line_end":2412,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111650,"byte_end":9111667,"line_start":2413,"line_end":2413,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112155,"byte_end":9112167,"line_start":2430,"line_end":2430,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111803,"byte_end":9111860,"line_start":2419,"line_end":2419,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111861,"byte_end":9111868,"line_start":2420,"line_end":2420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111869,"byte_end":9111892,"line_start":2421,"line_end":2421,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111893,"byte_end":9111935,"line_start":2422,"line_end":2422,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111936,"byte_end":9111979,"line_start":2423,"line_end":2423,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9111980,"byte_end":9112011,"line_start":2424,"line_end":2424,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112012,"byte_end":9112053,"line_start":2425,"line_end":2425,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112054,"byte_end":9112061,"line_start":2426,"line_end":2426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112062,"byte_end":9112073,"line_start":2427,"line_end":2427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112074,"byte_end":9112091,"line_start":2428,"line_end":2428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112734,"byte_end":9112751,"line_start":2447,"line_end":2447,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112244,"byte_end":9112322,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112323,"byte_end":9112326,"line_start":2435,"line_end":2435,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112327,"byte_end":9112357,"line_start":2436,"line_end":2436,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112358,"byte_end":9112365,"line_start":2437,"line_end":2437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112366,"byte_end":9112389,"line_start":2438,"line_end":2438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112390,"byte_end":9112448,"line_start":2439,"line_end":2439,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112449,"byte_end":9112485,"line_start":2440,"line_end":2440,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112486,"byte_end":9112539,"line_start":2441,"line_end":2441,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112540,"byte_end":9112632,"line_start":2442,"line_end":2442,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112633,"byte_end":9112640,"line_start":2443,"line_end":2443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112641,"byte_end":9112652,"line_start":2444,"line_end":2444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112653,"byte_end":9112670,"line_start":2445,"line_end":2445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113276,"byte_end":9113293,"line_start":2464,"line_end":2464,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112838,"byte_end":9112916,"line_start":2451,"line_end":2451,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112917,"byte_end":9112920,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112921,"byte_end":9112951,"line_start":2453,"line_end":2453,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112952,"byte_end":9112959,"line_start":2454,"line_end":2454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112960,"byte_end":9112983,"line_start":2455,"line_end":2455,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9112984,"byte_end":9113028,"line_start":2456,"line_end":2456,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113029,"byte_end":9113065,"line_start":2457,"line_end":2457,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113066,"byte_end":9113119,"line_start":2458,"line_end":2458,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113120,"byte_end":9113174,"line_start":2459,"line_end":2459,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113175,"byte_end":9113182,"line_start":2460,"line_end":2460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113183,"byte_end":9113194,"line_start":2461,"line_end":2461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113195,"byte_end":9113212,"line_start":2462,"line_end":2462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113810,"byte_end":9113827,"line_start":2481,"line_end":2481,"column_start":8,"column_end":25},"name":"shr_imm_i16_m128i","qualname":"::x86_x64::sse2::shr_imm_i16_m128i","value":"pub fn shr_imm_i16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113380,"byte_end":9113429,"line_start":2468,"line_end":2468,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113430,"byte_end":9113433,"line_start":2469,"line_end":2469,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113434,"byte_end":9113464,"line_start":2470,"line_end":2470,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113465,"byte_end":9113468,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113469,"byte_end":9113476,"line_start":2472,"line_end":2472,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113477,"byte_end":9113500,"line_start":2473,"line_end":2473,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113501,"byte_end":9113559,"line_start":2474,"line_end":2474,"column_start":1,"column_end":59}},{"value":"/ let c: [i16; 8] = shr_imm_i16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113560,"byte_end":9113615,"line_start":2475,"line_end":2475,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113616,"byte_end":9113708,"line_start":2476,"line_end":2476,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113709,"byte_end":9113716,"line_start":2477,"line_end":2477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113717,"byte_end":9113728,"line_start":2478,"line_end":2478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113729,"byte_end":9113746,"line_start":2479,"line_end":2479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114287,"byte_end":9114304,"line_start":2498,"line_end":2498,"column_start":8,"column_end":25},"name":"shr_imm_i32_m128i","qualname":"::x86_x64::sse2::shr_imm_i32_m128i","value":"pub fn shr_imm_i32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113913,"byte_end":9113962,"line_start":2485,"line_end":2485,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113963,"byte_end":9113966,"line_start":2486,"line_end":2486,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113967,"byte_end":9113997,"line_start":2487,"line_end":2487,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9113998,"byte_end":9114001,"line_start":2488,"line_end":2488,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114002,"byte_end":9114009,"line_start":2489,"line_end":2489,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114010,"byte_end":9114033,"line_start":2490,"line_end":2490,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114034,"byte_end":9114074,"line_start":2491,"line_end":2491,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = shr_imm_i32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114075,"byte_end":9114130,"line_start":2492,"line_end":2492,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114131,"byte_end":9114185,"line_start":2493,"line_end":2493,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114186,"byte_end":9114193,"line_start":2494,"line_end":2494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114194,"byte_end":9114205,"line_start":2495,"line_end":2495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114206,"byte_end":9114223,"line_start":2496,"line_end":2496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114858,"byte_end":9114875,"line_start":2514,"line_end":2514,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114390,"byte_end":9114468,"line_start":2502,"line_end":2502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114469,"byte_end":9114472,"line_start":2503,"line_end":2503,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114473,"byte_end":9114480,"line_start":2504,"line_end":2504,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114481,"byte_end":9114504,"line_start":2505,"line_end":2505,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114505,"byte_end":9114567,"line_start":2506,"line_end":2506,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114568,"byte_end":9114604,"line_start":2507,"line_end":2507,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114605,"byte_end":9114658,"line_start":2508,"line_end":2508,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114659,"byte_end":9114756,"line_start":2509,"line_end":2509,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114757,"byte_end":9114764,"line_start":2510,"line_end":2510,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114765,"byte_end":9114776,"line_start":2511,"line_end":2511,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114777,"byte_end":9114794,"line_start":2512,"line_end":2512,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115374,"byte_end":9115391,"line_start":2530,"line_end":2530,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9114962,"byte_end":9115040,"line_start":2518,"line_end":2518,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115041,"byte_end":9115044,"line_start":2519,"line_end":2519,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115045,"byte_end":9115052,"line_start":2520,"line_end":2520,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115053,"byte_end":9115076,"line_start":2521,"line_end":2521,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115077,"byte_end":9115123,"line_start":2522,"line_end":2522,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115124,"byte_end":9115160,"line_start":2523,"line_end":2523,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115161,"byte_end":9115214,"line_start":2524,"line_end":2524,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115215,"byte_end":9115272,"line_start":2525,"line_end":2525,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115273,"byte_end":9115280,"line_start":2526,"line_end":2526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115281,"byte_end":9115292,"line_start":2527,"line_end":2527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115293,"byte_end":9115310,"line_start":2528,"line_end":2528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115882,"byte_end":9115899,"line_start":2547,"line_end":2547,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115478,"byte_end":9115556,"line_start":2534,"line_end":2534,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115557,"byte_end":9115560,"line_start":2535,"line_end":2535,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115561,"byte_end":9115581,"line_start":2536,"line_end":2536,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115582,"byte_end":9115589,"line_start":2537,"line_end":2537,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115590,"byte_end":9115613,"line_start":2538,"line_end":2538,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115614,"byte_end":9115651,"line_start":2539,"line_end":2539,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115652,"byte_end":9115688,"line_start":2540,"line_end":2540,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115689,"byte_end":9115742,"line_start":2541,"line_end":2541,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115743,"byte_end":9115780,"line_start":2542,"line_end":2542,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115781,"byte_end":9115788,"line_start":2543,"line_end":2543,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115789,"byte_end":9115800,"line_start":2544,"line_end":2544,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115801,"byte_end":9115818,"line_start":2545,"line_end":2545,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116493,"byte_end":9116510,"line_start":2566,"line_end":2566,"column_start":8,"column_end":25},"name":"shr_imm_u16_m128i","qualname":"::x86_x64::sse2::shr_imm_u16_m128i","value":"pub fn shr_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9115986,"byte_end":9116035,"line_start":2551,"line_end":2551,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116036,"byte_end":9116039,"line_start":2552,"line_end":2552,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116040,"byte_end":9116060,"line_start":2553,"line_end":2553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116061,"byte_end":9116064,"line_start":2554,"line_end":2554,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116065,"byte_end":9116072,"line_start":2555,"line_end":2555,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116073,"byte_end":9116096,"line_start":2556,"line_end":2556,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116097,"byte_end":9116159,"line_start":2557,"line_end":2557,"column_start":1,"column_end":63}},{"value":"/ let c: [u16; 8] = shr_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116160,"byte_end":9116215,"line_start":2558,"line_end":2558,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116216,"byte_end":9116313,"line_start":2559,"line_end":2559,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116314,"byte_end":9116321,"line_start":2560,"line_end":2560,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi16`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116322,"byte_end":9116361,"line_start":2561,"line_end":2561,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlw xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116362,"byte_end":9116399,"line_start":2562,"line_end":2562,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116400,"byte_end":9116411,"line_start":2563,"line_end":2563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116412,"byte_end":9116429,"line_start":2564,"line_end":2564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117017,"byte_end":9117034,"line_start":2583,"line_end":2583,"column_start":8,"column_end":25},"name":"shr_imm_u32_m128i","qualname":"::x86_x64::sse2::shr_imm_u32_m128i","value":"pub fn shr_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116596,"byte_end":9116645,"line_start":2570,"line_end":2570,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116646,"byte_end":9116649,"line_start":2571,"line_end":2571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116650,"byte_end":9116657,"line_start":2572,"line_end":2572,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116658,"byte_end":9116681,"line_start":2573,"line_end":2573,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 300, 400]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116682,"byte_end":9116724,"line_start":2574,"line_end":2574,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = shr_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116725,"byte_end":9116780,"line_start":2575,"line_end":2575,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116781,"byte_end":9116837,"line_start":2576,"line_end":2576,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116838,"byte_end":9116845,"line_start":2577,"line_end":2577,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi32`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116846,"byte_end":9116885,"line_start":2578,"line_end":2578,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrld xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116886,"byte_end":9116923,"line_start":2579,"line_end":2579,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116924,"byte_end":9116935,"line_start":2580,"line_end":2580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9116936,"byte_end":9116953,"line_start":2581,"line_end":2581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117524,"byte_end":9117541,"line_start":2600,"line_end":2600,"column_start":8,"column_end":25},"name":"shr_imm_u64_m128i","qualname":"::x86_x64::sse2::shr_imm_u64_m128i","value":"pub fn shr_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes right by an immediate.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117120,"byte_end":9117170,"line_start":2587,"line_end":2587,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117171,"byte_end":9117174,"line_start":2588,"line_end":2588,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117175,"byte_end":9117182,"line_start":2589,"line_end":2589,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117183,"byte_end":9117206,"line_start":2590,"line_end":2590,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 200]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117207,"byte_end":9117245,"line_start":2591,"line_end":2591,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = shr_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117246,"byte_end":9117301,"line_start":2592,"line_end":2592,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 >> 3, 200 >> 3]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117302,"byte_end":9117344,"line_start":2593,"line_end":2593,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117345,"byte_end":9117352,"line_start":2594,"line_end":2594,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi64`]","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117353,"byte_end":9117392,"line_start":2595,"line_end":2595,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlq xmm, imm8`","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117393,"byte_end":9117430,"line_start":2596,"line_end":2596,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117431,"byte_end":9117442,"line_start":2597,"line_end":2597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117443,"byte_end":9117460,"line_start":2598,"line_end":2598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117957,"byte_end":9117968,"line_start":2615,"line_end":2615,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117627,"byte_end":9117671,"line_start":2604,"line_end":2604,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117672,"byte_end":9117679,"line_start":2605,"line_end":2605,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117680,"byte_end":9117703,"line_start":2606,"line_end":2606,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117704,"byte_end":9117748,"line_start":2607,"line_end":2607,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117749,"byte_end":9117780,"line_start":2608,"line_end":2608,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117781,"byte_end":9117808,"line_start":2609,"line_end":2609,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117809,"byte_end":9117834,"line_start":2610,"line_end":2610,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117835,"byte_end":9117867,"line_start":2611,"line_end":2611,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117868,"byte_end":9117875,"line_start":2612,"line_end":2612,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9117876,"byte_end":9117893,"line_start":2613,"line_end":2613,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118355,"byte_end":9118368,"line_start":2629,"line_end":2629,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118059,"byte_end":9118112,"line_start":2619,"line_end":2619,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118113,"byte_end":9118120,"line_start":2620,"line_end":2620,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118121,"byte_end":9118144,"line_start":2621,"line_end":2621,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118145,"byte_end":9118189,"line_start":2622,"line_end":2622,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118190,"byte_end":9118210,"line_start":2623,"line_end":2623,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118211,"byte_end":9118240,"line_start":2624,"line_end":2624,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118241,"byte_end":9118265,"line_start":2625,"line_end":2625,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118266,"byte_end":9118273,"line_start":2626,"line_end":2626,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118274,"byte_end":9118291,"line_start":2627,"line_end":2627,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118801,"byte_end":9118818,"line_start":2644,"line_end":2644,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118443,"byte_end":9118509,"line_start":2633,"line_end":2633,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118510,"byte_end":9118517,"line_start":2634,"line_end":2634,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118518,"byte_end":9118541,"line_start":2635,"line_end":2635,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118542,"byte_end":9118586,"line_start":2636,"line_end":2636,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118587,"byte_end":9118618,"line_start":2637,"line_end":2637,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118619,"byte_end":9118652,"line_start":2638,"line_end":2638,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118653,"byte_end":9118678,"line_start":2639,"line_end":2639,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118679,"byte_end":9118711,"line_start":2640,"line_end":2640,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118712,"byte_end":9118719,"line_start":2641,"line_end":2641,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118720,"byte_end":9118737,"line_start":2642,"line_end":2642,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119240,"byte_end":9119251,"line_start":2659,"line_end":2659,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118910,"byte_end":9118954,"line_start":2648,"line_end":2648,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118955,"byte_end":9118962,"line_start":2649,"line_end":2649,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118963,"byte_end":9118986,"line_start":2650,"line_end":2650,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9118987,"byte_end":9119025,"line_start":2651,"line_end":2651,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119026,"byte_end":9119057,"line_start":2652,"line_end":2652,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119058,"byte_end":9119085,"line_start":2653,"line_end":2653,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119086,"byte_end":9119117,"line_start":2654,"line_end":2654,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119118,"byte_end":9119150,"line_start":2655,"line_end":2655,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119151,"byte_end":9119158,"line_start":2656,"line_end":2656,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119159,"byte_end":9119176,"line_start":2657,"line_end":2657,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119628,"byte_end":9119646,"line_start":2673,"line_end":2673,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119326,"byte_end":9119380,"line_start":2663,"line_end":2663,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119381,"byte_end":9119388,"line_start":2664,"line_end":2664,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119389,"byte_end":9119412,"line_start":2665,"line_end":2665,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119413,"byte_end":9119457,"line_start":2666,"line_end":2666,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119458,"byte_end":9119478,"line_start":2667,"line_end":2667,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119479,"byte_end":9119513,"line_start":2668,"line_end":2668,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119514,"byte_end":9119538,"line_start":2669,"line_end":2669,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119539,"byte_end":9119546,"line_start":2670,"line_end":2670,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119547,"byte_end":9119564,"line_start":2671,"line_end":2671,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120045,"byte_end":9120062,"line_start":2688,"line_end":2688,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119722,"byte_end":9119766,"line_start":2677,"line_end":2677,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119767,"byte_end":9119774,"line_start":2678,"line_end":2678,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119775,"byte_end":9119798,"line_start":2679,"line_end":2679,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119799,"byte_end":9119835,"line_start":2680,"line_end":2680,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119836,"byte_end":9119858,"line_start":2681,"line_end":2681,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119859,"byte_end":9119892,"line_start":2682,"line_end":2682,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119893,"byte_end":9119918,"line_start":2683,"line_end":2683,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119919,"byte_end":9119926,"line_start":2684,"line_end":2684,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119927,"byte_end":9119944,"line_start":2685,"line_end":2685,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9119945,"byte_end":9119981,"line_start":2686,"line_end":2686,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120496,"byte_end":9120516,"line_start":2703,"line_end":2703,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120157,"byte_end":9120201,"line_start":2692,"line_end":2692,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120202,"byte_end":9120209,"line_start":2693,"line_end":2693,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120210,"byte_end":9120233,"line_start":2694,"line_end":2694,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120234,"byte_end":9120278,"line_start":2695,"line_end":2695,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120279,"byte_end":9120310,"line_start":2696,"line_end":2696,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120311,"byte_end":9120347,"line_start":2697,"line_end":2697,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120348,"byte_end":9120373,"line_start":2698,"line_end":2698,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120374,"byte_end":9120406,"line_start":2699,"line_end":2699,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120407,"byte_end":9120414,"line_start":2700,"line_end":2700,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120415,"byte_end":9120432,"line_start":2701,"line_end":2701,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120918,"byte_end":9120939,"line_start":2717,"line_end":2717,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120608,"byte_end":9120652,"line_start":2707,"line_end":2707,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120653,"byte_end":9120660,"line_start":2708,"line_end":2708,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120661,"byte_end":9120684,"line_start":2709,"line_end":2709,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120685,"byte_end":9120729,"line_start":2710,"line_end":2710,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120730,"byte_end":9120757,"line_start":2711,"line_end":2711,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120758,"byte_end":9120795,"line_start":2712,"line_end":2712,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120796,"byte_end":9120828,"line_start":2713,"line_end":2713,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120829,"byte_end":9120836,"line_start":2714,"line_end":2714,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9120837,"byte_end":9120854,"line_start":2715,"line_end":2715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121415,"byte_end":9121436,"line_start":2731,"line_end":2731,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121021,"byte_end":9121065,"line_start":2721,"line_end":2721,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121066,"byte_end":9121073,"line_start":2722,"line_end":2722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121074,"byte_end":9121097,"line_start":2723,"line_end":2723,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121098,"byte_end":9121181,"line_start":2724,"line_end":2724,"column_start":1,"column_end":84}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121182,"byte_end":9121209,"line_start":2725,"line_end":2725,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121210,"byte_end":9121247,"line_start":2726,"line_end":2726,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121248,"byte_end":9121325,"line_start":2727,"line_end":2727,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121326,"byte_end":9121333,"line_start":2728,"line_end":2728,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121334,"byte_end":9121351,"line_start":2729,"line_end":2729,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122017,"byte_end":9122029,"line_start":2746,"line_end":2746,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121528,"byte_end":9121568,"line_start":2735,"line_end":2735,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121569,"byte_end":9121576,"line_start":2736,"line_end":2736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121577,"byte_end":9121600,"line_start":2737,"line_end":2737,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121601,"byte_end":9121684,"line_start":2738,"line_end":2738,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121685,"byte_end":9121776,"line_start":2739,"line_end":2739,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121777,"byte_end":9121825,"line_start":2740,"line_end":2740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121826,"byte_end":9121915,"line_start":2741,"line_end":2741,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121916,"byte_end":9121923,"line_start":2742,"line_end":2742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121924,"byte_end":9121935,"line_start":2743,"line_end":2743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9121936,"byte_end":9121953,"line_start":2744,"line_end":2744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122515,"byte_end":9122528,"line_start":2761,"line_end":2761,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122107,"byte_end":9122148,"line_start":2750,"line_end":2750,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122149,"byte_end":9122156,"line_start":2751,"line_end":2751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122157,"byte_end":9122180,"line_start":2752,"line_end":2752,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122181,"byte_end":9122239,"line_start":2753,"line_end":2753,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122240,"byte_end":9122305,"line_start":2754,"line_end":2754,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122306,"byte_end":9122355,"line_start":2755,"line_end":2755,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122356,"byte_end":9122413,"line_start":2756,"line_end":2756,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122414,"byte_end":9122421,"line_start":2757,"line_end":2757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122422,"byte_end":9122433,"line_start":2758,"line_end":2758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122434,"byte_end":9122451,"line_start":2759,"line_end":2759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122955,"byte_end":9122968,"line_start":2776,"line_end":2776,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122607,"byte_end":9122648,"line_start":2765,"line_end":2765,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122649,"byte_end":9122656,"line_start":2766,"line_end":2766,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122657,"byte_end":9122680,"line_start":2767,"line_end":2767,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122681,"byte_end":9122719,"line_start":2768,"line_end":2768,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122720,"byte_end":9122762,"line_start":2769,"line_end":2769,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122763,"byte_end":9122812,"line_start":2770,"line_end":2770,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122813,"byte_end":9122853,"line_start":2771,"line_end":2771,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122854,"byte_end":9122861,"line_start":2772,"line_end":2772,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122862,"byte_end":9122873,"line_start":2773,"line_end":2773,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9122874,"byte_end":9122891,"line_start":2774,"line_end":2774,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123383,"byte_end":9123396,"line_start":2791,"line_end":2791,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123047,"byte_end":9123088,"line_start":2780,"line_end":2780,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123089,"byte_end":9123096,"line_start":2781,"line_end":2781,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123097,"byte_end":9123120,"line_start":2782,"line_end":2782,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123121,"byte_end":9123159,"line_start":2783,"line_end":2783,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123160,"byte_end":9123200,"line_start":2784,"line_end":2784,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123201,"byte_end":9123250,"line_start":2785,"line_end":2785,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123251,"byte_end":9123281,"line_start":2786,"line_end":2786,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123282,"byte_end":9123289,"line_start":2787,"line_end":2787,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123290,"byte_end":9123301,"line_start":2788,"line_end":2788,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123302,"byte_end":9123319,"line_start":2789,"line_end":2789,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123794,"byte_end":9123803,"line_start":2806,"line_end":2806,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123475,"byte_end":9123496,"line_start":2795,"line_end":2795,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123497,"byte_end":9123504,"line_start":2796,"line_end":2796,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123505,"byte_end":9123528,"line_start":2797,"line_end":2797,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123529,"byte_end":9123573,"line_start":2798,"line_end":2798,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123574,"byte_end":9123619,"line_start":2799,"line_end":2799,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123620,"byte_end":9123659,"line_start":2800,"line_end":2800,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123660,"byte_end":9123692,"line_start":2801,"line_end":2801,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123693,"byte_end":9123700,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123701,"byte_end":9123712,"line_start":2803,"line_end":2803,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123713,"byte_end":9123730,"line_start":2804,"line_end":2804,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124226,"byte_end":9124237,"line_start":2821,"line_end":2821,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123879,"byte_end":9123924,"line_start":2810,"line_end":2810,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123925,"byte_end":9123932,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123933,"byte_end":9123956,"line_start":2812,"line_end":2812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9123957,"byte_end":9124001,"line_start":2813,"line_end":2813,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124002,"byte_end":9124049,"line_start":2814,"line_end":2814,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124050,"byte_end":9124091,"line_start":2815,"line_end":2815,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124092,"byte_end":9124124,"line_start":2816,"line_end":2816,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124125,"byte_end":9124132,"line_start":2817,"line_end":2817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124133,"byte_end":9124144,"line_start":2818,"line_end":2818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124145,"byte_end":9124162,"line_start":2819,"line_end":2819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124829,"byte_end":9124852,"line_start":2836,"line_end":2836,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124313,"byte_end":9124364,"line_start":2825,"line_end":2825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124365,"byte_end":9124372,"line_start":2826,"line_end":2826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124373,"byte_end":9124396,"line_start":2827,"line_end":2827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124397,"byte_end":9124485,"line_start":2828,"line_end":2828,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124486,"byte_end":9124576,"line_start":2829,"line_end":2829,"column_start":1,"column_end":91}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124577,"byte_end":9124636,"line_start":2830,"line_end":2830,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124637,"byte_end":9124727,"line_start":2831,"line_end":2831,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124728,"byte_end":9124735,"line_start":2832,"line_end":2832,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124736,"byte_end":9124747,"line_start":2833,"line_end":2833,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124748,"byte_end":9124765,"line_start":2834,"line_end":2834,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125370,"byte_end":9125394,"line_start":2851,"line_end":2851,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124931,"byte_end":9124983,"line_start":2840,"line_end":2840,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124984,"byte_end":9124991,"line_start":2841,"line_end":2841,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9124992,"byte_end":9125015,"line_start":2842,"line_end":2842,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125016,"byte_end":9125074,"line_start":2843,"line_end":2843,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125075,"byte_end":9125145,"line_start":2844,"line_end":2844,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125146,"byte_end":9125206,"line_start":2845,"line_end":2845,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125207,"byte_end":9125268,"line_start":2846,"line_end":2846,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125269,"byte_end":9125276,"line_start":2847,"line_end":2847,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125277,"byte_end":9125288,"line_start":2848,"line_end":2848,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125289,"byte_end":9125306,"line_start":2849,"line_end":2849,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125972,"byte_end":9125995,"line_start":2866,"line_end":2866,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125474,"byte_end":9125525,"line_start":2855,"line_end":2855,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125526,"byte_end":9125533,"line_start":2856,"line_end":2856,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125534,"byte_end":9125557,"line_start":2857,"line_end":2857,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125558,"byte_end":9125645,"line_start":2858,"line_end":2858,"column_start":1,"column_end":88}},{"value":"/ let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125646,"byte_end":9125734,"line_start":2859,"line_end":2859,"column_start":1,"column_end":89}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125735,"byte_end":9125794,"line_start":2860,"line_end":2860,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125795,"byte_end":9125870,"line_start":2861,"line_end":2861,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125871,"byte_end":9125878,"line_start":2862,"line_end":2862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125879,"byte_end":9125890,"line_start":2863,"line_end":2863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9125891,"byte_end":9125908,"line_start":2864,"line_end":2864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126519,"byte_end":9126543,"line_start":2881,"line_end":2881,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126074,"byte_end":9126126,"line_start":2870,"line_end":2870,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126127,"byte_end":9126134,"line_start":2871,"line_end":2871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126135,"byte_end":9126158,"line_start":2872,"line_end":2872,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126159,"byte_end":9126229,"line_start":2873,"line_end":2873,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126230,"byte_end":9126302,"line_start":2874,"line_end":2874,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126303,"byte_end":9126363,"line_start":2875,"line_end":2875,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126364,"byte_end":9126417,"line_start":2876,"line_end":2876,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126418,"byte_end":9126425,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126426,"byte_end":9126437,"line_start":2878,"line_end":2878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126438,"byte_end":9126455,"line_start":2879,"line_end":2879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127132,"byte_end":9127152,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126623,"byte_end":9126680,"line_start":2885,"line_end":2885,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126681,"byte_end":9126688,"line_start":2886,"line_end":2886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126689,"byte_end":9126712,"line_start":2887,"line_end":2887,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126713,"byte_end":9126796,"line_start":2888,"line_end":2888,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126797,"byte_end":9126888,"line_start":2889,"line_end":2889,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126889,"byte_end":9126945,"line_start":2890,"line_end":2890,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9126946,"byte_end":9127030,"line_start":2891,"line_end":2891,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127031,"byte_end":9127038,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127039,"byte_end":9127050,"line_start":2893,"line_end":2893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127051,"byte_end":9127068,"line_start":2894,"line_end":2894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127662,"byte_end":9127683,"line_start":2911,"line_end":2911,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127235,"byte_end":9127293,"line_start":2900,"line_end":2900,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127294,"byte_end":9127301,"line_start":2901,"line_end":2901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127302,"byte_end":9127325,"line_start":2902,"line_end":2902,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127326,"byte_end":9127384,"line_start":2903,"line_end":2903,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127385,"byte_end":9127446,"line_start":2904,"line_end":2904,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127447,"byte_end":9127504,"line_start":2905,"line_end":2905,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127505,"byte_end":9127560,"line_start":2906,"line_end":2906,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127561,"byte_end":9127568,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127569,"byte_end":9127580,"line_start":2908,"line_end":2908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127581,"byte_end":9127598,"line_start":2909,"line_end":2909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128128,"byte_end":9128149,"line_start":2926,"line_end":2926,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127767,"byte_end":9127825,"line_start":2915,"line_end":2915,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127826,"byte_end":9127833,"line_start":2916,"line_end":2916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127834,"byte_end":9127857,"line_start":2917,"line_end":2917,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127858,"byte_end":9127896,"line_start":2918,"line_end":2918,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127897,"byte_end":9127935,"line_start":2919,"line_end":2919,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127936,"byte_end":9127993,"line_start":2920,"line_end":2920,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9127994,"byte_end":9128026,"line_start":2921,"line_end":2921,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128027,"byte_end":9128034,"line_start":2922,"line_end":2922,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128035,"byte_end":9128046,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128047,"byte_end":9128064,"line_start":2924,"line_end":2924,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128591,"byte_end":9128612,"line_start":2941,"line_end":2941,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128233,"byte_end":9128291,"line_start":2930,"line_end":2930,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128292,"byte_end":9128299,"line_start":2931,"line_end":2931,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128300,"byte_end":9128323,"line_start":2932,"line_end":2932,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128324,"byte_end":9128362,"line_start":2933,"line_end":2933,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128363,"byte_end":9128403,"line_start":2934,"line_end":2934,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128404,"byte_end":9128461,"line_start":2935,"line_end":2935,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128462,"byte_end":9128489,"line_start":2936,"line_end":2936,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128490,"byte_end":9128497,"line_start":2937,"line_end":2937,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128498,"byte_end":9128509,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128510,"byte_end":9128527,"line_start":2939,"line_end":2939,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129054,"byte_end":9129071,"line_start":2956,"line_end":2956,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128696,"byte_end":9128748,"line_start":2945,"line_end":2945,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128749,"byte_end":9128756,"line_start":2946,"line_end":2946,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128757,"byte_end":9128780,"line_start":2947,"line_end":2947,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128781,"byte_end":9128825,"line_start":2948,"line_end":2948,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128826,"byte_end":9128871,"line_start":2949,"line_end":2949,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128872,"byte_end":9128919,"line_start":2950,"line_end":2950,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128920,"byte_end":9128952,"line_start":2951,"line_end":2951,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128953,"byte_end":9128960,"line_start":2952,"line_end":2952,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128961,"byte_end":9128972,"line_start":2953,"line_end":2953,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9128973,"byte_end":9128990,"line_start":2954,"line_end":2954,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129655,"byte_end":9129674,"line_start":2971,"line_end":2971,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129152,"byte_end":9129208,"line_start":2960,"line_end":2960,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129209,"byte_end":9129216,"line_start":2961,"line_end":2961,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129217,"byte_end":9129240,"line_start":2962,"line_end":2962,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129241,"byte_end":9129324,"line_start":2963,"line_end":2963,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129325,"byte_end":9129420,"line_start":2964,"line_end":2964,"column_start":1,"column_end":96}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129421,"byte_end":9129476,"line_start":2965,"line_end":2965,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129477,"byte_end":9129553,"line_start":2966,"line_end":2966,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129554,"byte_end":9129561,"line_start":2967,"line_end":2967,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129562,"byte_end":9129573,"line_start":2968,"line_end":2968,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129574,"byte_end":9129591,"line_start":2969,"line_end":2969,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130171,"byte_end":9130191,"line_start":2986,"line_end":2986,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129757,"byte_end":9129814,"line_start":2975,"line_end":2975,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129815,"byte_end":9129822,"line_start":2976,"line_end":2976,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129823,"byte_end":9129846,"line_start":2977,"line_end":2977,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129847,"byte_end":9129905,"line_start":2978,"line_end":2978,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129906,"byte_end":9129967,"line_start":2979,"line_end":2979,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9129968,"byte_end":9130024,"line_start":2980,"line_end":2980,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130025,"byte_end":9130069,"line_start":2981,"line_end":2981,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130070,"byte_end":9130077,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130078,"byte_end":9130089,"line_start":2983,"line_end":2983,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130090,"byte_end":9130107,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130634,"byte_end":9130654,"line_start":3001,"line_end":3001,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130275,"byte_end":9130332,"line_start":2990,"line_end":2990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130333,"byte_end":9130340,"line_start":2991,"line_end":2991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130341,"byte_end":9130364,"line_start":2992,"line_end":2992,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130365,"byte_end":9130403,"line_start":2993,"line_end":2993,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130404,"byte_end":9130442,"line_start":2994,"line_end":2994,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130443,"byte_end":9130499,"line_start":2995,"line_end":2995,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130500,"byte_end":9130532,"line_start":2996,"line_end":2996,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130533,"byte_end":9130540,"line_start":2997,"line_end":2997,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130541,"byte_end":9130552,"line_start":2998,"line_end":2998,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130553,"byte_end":9130570,"line_start":2999,"line_end":2999,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131098,"byte_end":9131118,"line_start":3016,"line_end":3016,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130738,"byte_end":9130795,"line_start":3005,"line_end":3005,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130796,"byte_end":9130803,"line_start":3006,"line_end":3006,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130804,"byte_end":9130827,"line_start":3007,"line_end":3007,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130828,"byte_end":9130866,"line_start":3008,"line_end":3008,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130867,"byte_end":9130907,"line_start":3009,"line_end":3009,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130908,"byte_end":9130964,"line_start":3010,"line_end":3010,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130965,"byte_end":9130996,"line_start":3011,"line_end":3011,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9130997,"byte_end":9131004,"line_start":3012,"line_end":3012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131005,"byte_end":9131016,"line_start":3013,"line_end":3013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131017,"byte_end":9131034,"line_start":3014,"line_end":3014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131559,"byte_end":9131575,"line_start":3031,"line_end":3031,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131202,"byte_end":9131253,"line_start":3020,"line_end":3020,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131254,"byte_end":9131261,"line_start":3021,"line_end":3021,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131262,"byte_end":9131285,"line_start":3022,"line_end":3022,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131286,"byte_end":9131330,"line_start":3023,"line_end":3023,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131331,"byte_end":9131376,"line_start":3024,"line_end":3024,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131377,"byte_end":9131423,"line_start":3025,"line_end":3025,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131424,"byte_end":9131457,"line_start":3026,"line_end":3026,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131458,"byte_end":9131465,"line_start":3027,"line_end":3027,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131466,"byte_end":9131477,"line_start":3028,"line_end":3028,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131478,"byte_end":9131495,"line_start":3029,"line_end":3029,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131970,"byte_end":9131982,"line_start":3046,"line_end":3046,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131656,"byte_end":9131676,"line_start":3035,"line_end":3035,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131677,"byte_end":9131684,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131685,"byte_end":9131708,"line_start":3037,"line_end":3037,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131709,"byte_end":9131751,"line_start":3038,"line_end":3038,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131752,"byte_end":9131794,"line_start":3039,"line_end":3039,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131795,"byte_end":9131837,"line_start":3040,"line_end":3040,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131838,"byte_end":9131868,"line_start":3041,"line_end":3041,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131869,"byte_end":9131876,"line_start":3042,"line_end":3042,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131877,"byte_end":9131888,"line_start":3043,"line_end":3043,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9131889,"byte_end":9131906,"line_start":3044,"line_end":3044,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132372,"byte_end":9132384,"line_start":3061,"line_end":3061,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132058,"byte_end":9132078,"line_start":3050,"line_end":3050,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132079,"byte_end":9132086,"line_start":3051,"line_end":3051,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132087,"byte_end":9132110,"line_start":3052,"line_end":3052,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132111,"byte_end":9132149,"line_start":3053,"line_end":3053,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132150,"byte_end":9132188,"line_start":3054,"line_end":3054,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132189,"byte_end":9132237,"line_start":3055,"line_end":3055,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132238,"byte_end":9132270,"line_start":3056,"line_end":3056,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132271,"byte_end":9132278,"line_start":3057,"line_end":3057,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132279,"byte_end":9132290,"line_start":3058,"line_end":3058,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9132291,"byte_end":9132308,"line_start":3059,"line_end":3059,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":10541,"byte_end":10563,"line_start":233,"line_end":233,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11408,"byte_end":11432,"line_start":253,"line_end":253,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11723,"byte_end":11736,"line_start":265,"line_end":265,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12067,"byte_end":12080,"line_start":278,"line_end":278,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12029,"byte_end":12057,"line_start":277,"line_end":277,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953654,"byte_end":8953658,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953721,"byte_end":8953725,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953811,"byte_end":8953815,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953825,"byte_end":8953829,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954847,"byte_end":8954851,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954946,"byte_end":8954950,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954972,"byte_end":8954976,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8955104,"byte_end":8955108,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8955706,"byte_end":8955710,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956028,"byte_end":8956032,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956391,"byte_end":8956395,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956760,"byte_end":8956764,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957085,"byte_end":8957089,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957410,"byte_end":8957414,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957783,"byte_end":8957787,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8958153,"byte_end":8958157,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959387,"byte_end":8959392,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959455,"byte_end":8959460,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959547,"byte_end":8959552,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959562,"byte_end":8959567,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960582,"byte_end":8960587,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960682,"byte_end":8960687,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960709,"byte_end":8960714,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960842,"byte_end":8960847,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8961447,"byte_end":8961452,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8961867,"byte_end":8961872,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8962318,"byte_end":8962323,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8962785,"byte_end":8962790,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8963205,"byte_end":8963210,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8963625,"byte_end":8963630,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8964098,"byte_end":8964103,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8964568,"byte_end":8964573,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966080,"byte_end":8966085,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966148,"byte_end":8966153,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966240,"byte_end":8966245,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966265,"byte_end":8966270,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966365,"byte_end":8966370,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966392,"byte_end":8966397,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966535,"byte_end":8966540,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966826,"byte_end":8966831,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967128,"byte_end":8967133,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967419,"byte_end":8967424,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967721,"byte_end":8967726,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968012,"byte_end":8968017,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968314,"byte_end":8968319,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968605,"byte_end":8968610,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968904,"byte_end":8968909,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969179,"byte_end":8969184,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969519,"byte_end":8969524,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969985,"byte_end":8969990,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8970484,"byte_end":8970489,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8970943,"byte_end":8970948,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8971414,"byte_end":8971419,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8971885,"byte_end":8971890,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8972348,"byte_end":8972353,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8972808,"byte_end":8972813,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974282,"byte_end":8974286,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974349,"byte_end":8974353,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974439,"byte_end":8974443,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974453,"byte_end":8974457,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975471,"byte_end":8975475,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975570,"byte_end":8975574,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975596,"byte_end":8975600,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975728,"byte_end":8975732,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8976330,"byte_end":8976334,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8976816,"byte_end":8976820,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8977321,"byte_end":8977325,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8977834,"byte_end":8977838,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8978319,"byte_end":8978323,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8978804,"byte_end":8978808,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8979321,"byte_end":8979325,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8979835,"byte_end":8979839,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981252,"byte_end":8981257,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981320,"byte_end":8981325,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981412,"byte_end":8981417,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981427,"byte_end":8981432,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982447,"byte_end":8982452,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982547,"byte_end":8982552,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982574,"byte_end":8982579,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982707,"byte_end":8982712,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8983312,"byte_end":8983317,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8983732,"byte_end":8983737,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8984183,"byte_end":8984188,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8984650,"byte_end":8984655,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985070,"byte_end":8985075,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985490,"byte_end":8985495,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985963,"byte_end":8985968,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8986433,"byte_end":8986438,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987945,"byte_end":8987950,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988013,"byte_end":8988018,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988105,"byte_end":8988110,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988130,"byte_end":8988135,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988230,"byte_end":8988235,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988257,"byte_end":8988262,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988400,"byte_end":8988405,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988691,"byte_end":8988696,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988994,"byte_end":8988999,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989288,"byte_end":8989293,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989592,"byte_end":8989597,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989883,"byte_end":8989888,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990185,"byte_end":8990190,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990476,"byte_end":8990481,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990780,"byte_end":8990785,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991070,"byte_end":8991075,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991420,"byte_end":8991425,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991898,"byte_end":8991903,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8992409,"byte_end":8992414,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8992880,"byte_end":8992885,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8993371,"byte_end":8993376,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8993862,"byte_end":8993867,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8994337,"byte_end":8994342,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8994809,"byte_end":8994814,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034437,"byte_end":9034441,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034585,"byte_end":9034589,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034700,"byte_end":9034704,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034857,"byte_end":9034861,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034974,"byte_end":9034978,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035128,"byte_end":9035132,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035245,"byte_end":9035249,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035402,"byte_end":9035406,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035517,"byte_end":9035521,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035665,"byte_end":9035669,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035777,"byte_end":9035781,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035925,"byte_end":9035929,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036037,"byte_end":9036041,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036179,"byte_end":9036183,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036546,"byte_end":9036550,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036694,"byte_end":9036698,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036812,"byte_end":9036816,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133115,"byte_end":9133120,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133265,"byte_end":9133270,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133381,"byte_end":9133386,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133540,"byte_end":9133545,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133658,"byte_end":9133663,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133814,"byte_end":9133819,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133932,"byte_end":9133937,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134091,"byte_end":9134096,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134207,"byte_end":9134212,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134357,"byte_end":9134362,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134470,"byte_end":9134475,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134620,"byte_end":9134625,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134733,"byte_end":9134738,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134878,"byte_end":9134883,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135247,"byte_end":9135252,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135397,"byte_end":9135402,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135516,"byte_end":9135521,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135931,"byte_end":9135936,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136090,"byte_end":9136095,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136208,"byte_end":9136213,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136364,"byte_end":9136369,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136482,"byte_end":9136487,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136641,"byte_end":9136646,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136757,"byte_end":9136762,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9137114,"byte_end":9137119,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9137463,"byte_end":9137468,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":7091,"byte_end":7109,"line_start":133,"line_end":133,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953654,"byte_end":8953658,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953721,"byte_end":8953725,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953811,"byte_end":8953815,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8953825,"byte_end":8953829,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954847,"byte_end":8954851,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954946,"byte_end":8954950,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8954972,"byte_end":8954976,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8955104,"byte_end":8955108,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8955706,"byte_end":8955710,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956028,"byte_end":8956032,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956391,"byte_end":8956395,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8956760,"byte_end":8956764,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957085,"byte_end":8957089,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957410,"byte_end":8957414,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8957783,"byte_end":8957787,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8958153,"byte_end":8958157,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959387,"byte_end":8959392,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959455,"byte_end":8959460,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959547,"byte_end":8959552,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8959562,"byte_end":8959567,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960582,"byte_end":8960587,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960682,"byte_end":8960687,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960709,"byte_end":8960714,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8960842,"byte_end":8960847,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8961447,"byte_end":8961452,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8961867,"byte_end":8961872,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8962318,"byte_end":8962323,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8962785,"byte_end":8962790,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8963205,"byte_end":8963210,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8963625,"byte_end":8963630,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8964098,"byte_end":8964103,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8964568,"byte_end":8964573,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966080,"byte_end":8966085,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966148,"byte_end":8966153,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966240,"byte_end":8966245,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966265,"byte_end":8966270,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966365,"byte_end":8966370,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966392,"byte_end":8966397,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966535,"byte_end":8966540,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8966826,"byte_end":8966831,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967128,"byte_end":8967133,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967419,"byte_end":8967424,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8967721,"byte_end":8967726,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968012,"byte_end":8968017,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968314,"byte_end":8968319,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968605,"byte_end":8968610,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8968904,"byte_end":8968909,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969179,"byte_end":8969184,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969519,"byte_end":8969524,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8969985,"byte_end":8969990,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8970484,"byte_end":8970489,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8970943,"byte_end":8970948,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8971414,"byte_end":8971419,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8971885,"byte_end":8971890,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8972348,"byte_end":8972353,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8972808,"byte_end":8972813,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974282,"byte_end":8974286,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974349,"byte_end":8974353,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974439,"byte_end":8974443,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8974453,"byte_end":8974457,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975471,"byte_end":8975475,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975570,"byte_end":8975574,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975596,"byte_end":8975600,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8975728,"byte_end":8975732,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8976330,"byte_end":8976334,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8976816,"byte_end":8976820,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8977321,"byte_end":8977325,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8977834,"byte_end":8977838,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8978319,"byte_end":8978323,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8978804,"byte_end":8978808,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8979321,"byte_end":8979325,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8979835,"byte_end":8979839,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981252,"byte_end":8981257,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981320,"byte_end":8981325,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981412,"byte_end":8981417,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8981427,"byte_end":8981432,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982447,"byte_end":8982452,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982547,"byte_end":8982552,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982574,"byte_end":8982579,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8982707,"byte_end":8982712,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8983312,"byte_end":8983317,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8983732,"byte_end":8983737,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8984183,"byte_end":8984188,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8984650,"byte_end":8984655,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985070,"byte_end":8985075,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985490,"byte_end":8985495,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8985963,"byte_end":8985968,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8986433,"byte_end":8986438,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8987945,"byte_end":8987950,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988013,"byte_end":8988018,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988105,"byte_end":8988110,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988130,"byte_end":8988135,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2610}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988230,"byte_end":8988235,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2999}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988257,"byte_end":8988262,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2967}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988400,"byte_end":8988405,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988691,"byte_end":8988696,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8988994,"byte_end":8988999,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989288,"byte_end":8989293,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989592,"byte_end":8989597,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8989883,"byte_end":8989888,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990185,"byte_end":8990190,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990476,"byte_end":8990481,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8990780,"byte_end":8990785,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991070,"byte_end":8991075,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2895}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991420,"byte_end":8991425,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9300}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8991898,"byte_end":8991903,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9307}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8992409,"byte_end":8992414,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9311}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8992880,"byte_end":8992885,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9319}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8993371,"byte_end":8993376,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9321}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8993862,"byte_end":8993867,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9313}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8994337,"byte_end":8994342,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9315}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8994809,"byte_end":8994814,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":9309}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034437,"byte_end":9034441,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034585,"byte_end":9034589,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3087}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034700,"byte_end":9034704,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034857,"byte_end":9034861,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9034974,"byte_end":9034978,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035128,"byte_end":9035132,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035245,"byte_end":9035249,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035402,"byte_end":9035406,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035517,"byte_end":9035521,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3071}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035665,"byte_end":9035669,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3099}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035777,"byte_end":9035781,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3066}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9035925,"byte_end":9035929,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3095}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036037,"byte_end":9036041,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036179,"byte_end":9036183,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036546,"byte_end":9036550,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3061}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036694,"byte_end":9036698,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":9036812,"byte_end":9036816,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133115,"byte_end":9133120,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3056}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133265,"byte_end":9133270,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3087}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133381,"byte_end":9133386,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133540,"byte_end":9133545,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133658,"byte_end":9133663,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133814,"byte_end":9133819,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9133932,"byte_end":9133937,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134091,"byte_end":9134096,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134207,"byte_end":9134212,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3071}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134357,"byte_end":9134362,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3099}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134470,"byte_end":9134475,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3066}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134620,"byte_end":9134625,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3095}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134733,"byte_end":9134738,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9134878,"byte_end":9134883,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135247,"byte_end":9135252,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3061}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135397,"byte_end":9135402,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135516,"byte_end":9135521,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9135931,"byte_end":9135936,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3112}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136090,"byte_end":9136095,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3139}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136208,"byte_end":9136213,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3117}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136364,"byte_end":9136369,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3143}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136482,"byte_end":9136487,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136641,"byte_end":9136646,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3147}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9136757,"byte_end":9136762,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3108}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9137114,"byte_end":9137119,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2640}},{"span":{"file_name":"C:\\Users\\Roger\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":9137463,"byte_end":9137468,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2645}}]}